<?php

namespace OpenExam\Models;

use Exception;
use OpenExam\Tests\Phalcon\TestCase;
use OpenExam\Tests\Phalcon\TestModelAccess;
use OpenExam\Tests\Phalcon\TestModelBasic;

/**
 * @author Anders Lövgren (Computing Department at BMC, Uppsala University)
 */
class ResultModel extends Result
{

        public function initialize()
        {
                parent::initialize();
        }

}

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-09-15 at 20:20:03.
 * @author Anders Lövgren (Computing Department at BMC, Uppsala University)
 */
class ResultTest extends TestCase
{

        /**
         * @group model
         */
        public function testRelations()
        {
                $result = Result::findFirst();
                self::assertNotNull($result);

                self::assertNotEquals(0, $result->answer->count());
                self::assertTrue(count($result->answer) == 1);
        }

        /**
         * @group model
         */
        public function testProperties()
        {
                $values = array(
                        'answer_id'    => Answer::findFirst()->id,
                        'corrector_id' => Corrector::findFirst()->id,
                        'score'        => 3.5
                );

                try {
                        $helper = new TestModelBasic(new Result());
                        $helper->tryPersist();
                        self::error("Excepted constraint violation exception");
                } catch (Exception $exception) {
                        // Expected exception
                }

                try {
                        $helper = new TestModelBasic(new Result());
                        $helper->tryPersist($values);
                } catch (Exception $exception) {
                        self::error($exception);
                }

                $values = array(
                        'answer_id'    => Answer::findFirst()->id,
                        'corrector_id' => Corrector::findFirst()->id,
                        'score'        => 3.5,
                        'comment'      => 'Comment1'
                );
                try {
                        $helper = new TestModelBasic(new Result());
                        $helper->tryPersist($values);
                } catch (Exception $exception) {
                        self::error("Unexcepted constraint violation exception");
                }

                $values = array(
                        'answer_id'    => Answer::findFirst()->id,
                        'corrector_id' => Corrector::findFirst()->id,
                        'score'        => 3.5,
                        'comment'      => 'Comment1',
                        'non_existing' => 666
                );
                try {
                        $helper = new TestModelBasic(new Result());
                        $helper->tryPersist($values);
                } catch (Exception $exception) {
                        self::error("Unexcepted constraint violation exception");
                }
        }

        /**
         * @group model
         * @group security
         */
        public function testAccess()
        {
                $helper = new TestModelAccess(new Result());
                $helper->testModelAccess();
        }

        /**
         * @covers OpenExam\Models\Result::getSource
         * @group model
         */
        public function testGetSource()
        {
                $object = new ResultModel();
                $expect = "results";
                $actual = $object->getSource();
                self::assertNotNull($actual);
                self::assertEquals($expect, $actual);
        }

}
