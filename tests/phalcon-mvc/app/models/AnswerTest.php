<?php

namespace OpenExam\Models;

use Exception;
use OpenExam\Tests\Phalcon\TestCase;
use OpenExam\Tests\Phalcon\TestModelAccess;
use OpenExam\Tests\Phalcon\TestModelBasic;

class LocalException extends \Exception
{
        
}

/**
 * @author Anders Lövgren (Computing Department at BMC, Uppsala University)
 */
class AnswerModel extends Answer
{

        public function initialize()
        {
                parent::initialize();
        }

}

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-09-15 at 11:38:53.
 * 
 * @author Anders Lövgren (Computing Department at BMC, Uppsala University)
 */
class AnswerTest extends TestCase
{

        protected function setUp()
        {
                $this->getDI()->get('user')->setPrimaryRole(null);
        }

        /**
         * @group model
         */
        public function testRelations()
        {
                $answer = Result::findFirst()->answer;
                self::assertNotNull($answer);

                self::assertNotEquals(0, $answer->question->count());
                self::assertNotEquals(0, $answer->result->count());
                self::assertNotEquals(0, $answer->student->count());

                self::assertEquals(1, count($answer->question));
                self::assertEquals(1, count($answer->result));
                self::assertEquals(1, count($answer->student));

                $answer = File::findFirst()->answer;
                self::assertNotEquals(0, $answer->files->count());
                self::assertTrue(count($answer->files) > 0);
        }

        /**
         * @group model
         */
        public function testProperties()
        {
                $values = array(
                        'student_id'  => Student::findFirst()->id,
                        'question_id' => Question::findFirst()->id
                );

                try {
                        $helper = new TestModelBasic(new Answer());
                        $helper->tryPersist();
                        self::error("Excepted constraint violation exception");
                } catch (Exception $exception) {
                        // Expected exception
                }

                try {
                        $helper = new TestModelBasic(new Answer());
                        $helper->tryPersist($values);
                } catch (Exception $exception) {
                        self::error($exception);
                }

                $helper->checkDefaults(array(
                        'answered' => false
                ));

                $values = array(
                        'student_id'  => Student::findFirst()->id,
                        'question_id' => Question::findFirst()->id,
                        'answered'    => true,
                        'answer'      => 'Answer text',
                        'comment'     => 'Comment text'
                );
                try {
                        $helper = new TestModelBasic(new Answer());
                        $helper->tryPersist($values);
                } catch (Exception $exception) {
                        self::error($exception);
                }

                $values = array(
                        'student_id'   => Student::findFirst()->id,
                        'question_id'  => Question::findFirst()->id,
                        'non_existing' => 666
                );
                try {
                        $helper = new TestModelBasic(new Answer());
                        $helper->tryPersist();
                        self::error("Excepted constraint violation exception");
                } catch (Exception $exception) {
                        // Expected exception
                }
        }

        /**
         * @group model
         * @group security
         */
        public function testAccess()
        {
                $helper = new TestModelAccess(new Answer());
                $helper->testModelAccess();
        }

        /**
         * @covers OpenExam\Models\Answer::getSource
         * @group model
         */
        public function testGetSource()
        {
                $object = new AnswerModel();
                $expect = "answers";
                $actual = $object->getSource();
                self::assertNotNull($actual);
                self::assertEquals($expect, $actual);
        }

}
