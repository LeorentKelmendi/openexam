<?php

namespace OpenExam\Library\Database;

use Exception;
use OpenExam\Library\Database\Adapter;
use OpenExam\Tests\Phalcon\TestCase;
use PDOException;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-09-04 at 15:00:28.
 */
class AdapterTest extends TestCase
{

        /**
         * @covers OpenExam\Library\Database\Adapter::create
         * @group database
         */
        public function testCreate()
        {
                $config = $this->config->database;

                try {
                        $config->adapter = Adapter::MySQL;
                        $adapter = Adapter::create($config);
                        self::assertNotNull($adapter);
                        self::assertInstanceOf('\Phalcon\Db\Adapter\Pdo\Mysql', $adapter);
                } catch (PDOException $exception) {
                        // ignore expected exception
                        self::info("Adapter %s: %s\n", Adapter::MySQL, $exception->getMessage());
                } catch (Exception $exception) {
                        self::error($exception);
                }

                try {
                        $config->adapter = Adapter::PostgreSQL;
                        $adapter = Adapter::create($config);
                        self::assertNotNull($adapter);
                        self::assertInstanceOf('\Phalcon\Db\Adapter\Pdo\Postgresql', $adapter);
                } catch (PDOException $exception) {
                        // ignore expected exception
                        self::info("Adapter %s: %s\n", Adapter::MySQL, $exception->getMessage());
                } catch (Exception $exception) {
                        self::error($exception);
                }

                try {
                        $config->adapter = Adapter::Oracle;
                        $adapter = Adapter::create($config);
                        self::assertNotNull($adapter);
                        self::assertInstanceOf('\Phalcon\Db\Adapter\Pdo\Oracle', $adapter);
                } catch (PDOException $exception) {
                        // ignore expected exception
                        self::info("Adapter %s: %s\n", Adapter::MySQL, $exception->getMessage());
                } catch (Exception $exception) {
                        self::error($exception);
                }

                try {
                        $config->adapter = Adapter::SQLite;
                        $adapter = Adapter::create($config);
                        self::assertNotNull($adapter);
                        self::assertInstanceOf('\Phalcon\Db\Adapter\Pdo\Sqlite', $adapter);
                } catch (PDOException $exception) {
                        // ignore expected exception
                        self::info("Adapter %s: %s\n", Adapter::MySQL, $exception->getMessage());
                } catch (Exception $exception) {
                        self::error($exception);
                }
        }

}
