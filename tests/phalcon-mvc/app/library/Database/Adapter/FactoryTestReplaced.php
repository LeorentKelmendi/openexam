<?php

/*
 * Copyright (C) 2014-2018 The OpenExam Project
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */

namespace OpenExam\Library\Database;

use Exception;
use OpenExam\Library\Database\Adapter\Factory;
use OpenExam\Tests\Phalcon\TestCase;
use PDOException;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-09-04 at 15:00:28.
 */
class FactoryTest extends TestCase {

  /**
   * @covers OpenExam\Library\Database\Adapter::create
   * @group database
   */
  public function testCreate() {
    $config = $this->config->database;

    try {
      $config->adapter = Factory::MYSQL;
      $adapter = Factory::create($config);
      self::assertNotNull($adapter);
      self::assertInstanceOf('\Phalcon\Db\Adapter\Pdo\Mysql', $adapter);
    } catch (PDOException $exception) {
      // ignore expected exception
      self::info("Adapter %s: %s\n", Factory::MYSQL, $exception->getMessage());
    } catch (Exception $exception) {
      self::error($exception);
    }

    try {
      $config->adapter = Factory::POSTGRE;
      $adapter = Factory::create($config);
      self::assertNotNull($adapter);
      self::assertInstanceOf('\Phalcon\Db\Adapter\Pdo\Postgresql', $adapter);
    } catch (PDOException $exception) {
      // ignore expected exception
      self::info("Adapter %s: %s\n", Factory::MYSQL, $exception->getMessage());
    } catch (Exception $exception) {
      self::error($exception);
    }

    try {
      $config->adapter = Factory::ORACLE;
      $adapter = Factory::create($config);
      self::assertNotNull($adapter);
      self::assertInstanceOf('\Phalcon\Db\Adapter\Pdo\Oracle', $adapter);
    } catch (PDOException $exception) {
      // ignore expected exception
      self::info("Adapter %s: %s\n", Factory::MYSQL, $exception->getMessage());
    } catch (Exception $exception) {
      self::error($exception);
    }

    try {
      $config->adapter = Factory::SQLITE;
      $adapter = Factory::create($config);
      self::assertNotNull($adapter);
      self::assertInstanceOf('\Phalcon\Db\Adapter\Pdo\Sqlite', $adapter);
    } catch (PDOException $exception) {
      // ignore expected exception
      self::info("Adapter %s: %s\n", Factory::MYSQL, $exception->getMessage());
    } catch (Exception $exception) {
      self::error($exception);
    }
  }

}
