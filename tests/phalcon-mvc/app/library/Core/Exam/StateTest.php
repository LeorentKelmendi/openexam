<?php

namespace OpenExam\Library\Core\Exam;

use OpenExam\Models\Answer;
use OpenExam\Models\Exam;
use OpenExam\Models\Question;
use OpenExam\Models\Result;
use OpenExam\Models\Student;
use OpenExam\Models\Topic;
use OpenExam\Tests\Phalcon\TestCase;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2014-09-30 at 23:00:36.
 * @author Anders LÃ¶vgren (Computing Department at BMC, Uppsala University)
 */
class StateTest extends TestCase
{

        /**
         * @var State
         */
        protected $state;
        /**
         * @var Exam 
         */
        protected $exam;
        /**
         * @var array 
         */
        protected static $data;

        /**
         * Sets up the fixture, for example, opens a network connection.
         * This method is called before a test is executed.
         */
        protected function setUp()
        {
                self::$data = array(
                        'exam'     => array(
                                'name'    => 'Exam 1',
                                'creator' => 'user1',
                                'orgunit' => 'orgunit1',
                                'grades'  => json_encode(array('data' => array('U' => 0, 'G' => 20, 'VG' => 30)))
                        ),
                        'student'  => array(
                                'exam_id' => 0,
                                'user'    => 'user1',
                                'code'    => '1234ABCD'
                        ),
                        'topic'    => array(
                                'exam_id'   => 0,
                                'name'      => 'Topic 1',
                                'randomize' => 0
                        ),
                        'question' => array(
                                'exam_id'  => 0,
                                'topic_id' => 0,
                                'score'    => 1.0,
                                'name'     => 'Question 1',
                                'quest'    => 'Question text',
                                'user'     => array('user1', 'user2'),
                        ),
                        'answer'   => array(
                                'question_id' => 0,
                                'student_id'  => 0,
                                'answered'    => true
                        ),
                        'result'   => array(
                                'answer_id' => 0,
                                'score'     => 1.5
                        )
                );

                $this->exam = new Exam();
                $this->exam->create(self::$data['exam']);

                self::$data['student']['exam_id'] = $this->exam->id;
                $this->student = new Student();
                $this->student->create(self::$data['student']);

                self::$data['topic']['exam_id'] = $this->exam->id;
                $this->topic = new Topic();
                $this->topic->create(self::$data['topic']);

                self::$data['question']['exam_id'] = $this->exam->id;
                self::$data['question']['topic_id'] = $this->topic->id;
                $this->question = new Question();
                $this->question->create(self::$data['question']);

                self::$data['answer']['student_id'] = $this->student->id;
                self::$data['answer']['question_id'] = $this->question->id;
                $this->answer = new Answer();
                $this->answer->create(self::$data['answer']);

                self::$data['result']['answer_id'] = $this->answer->id;

                $this->state = new State($this->exam);
        }

        /**
         * Tears down the fixture, for example, closes a network connection.
         * This method is called after a test is executed.
         */
        protected function tearDown()
        {
                if (isset($this->result)) {
                        $this->result->delete();
                }
                if (isset($this->answer)) {
                        $this->answer->delete();
                }
                if (isset($this->question)) {
                        $this->question->delete();
                }
                if (isset($this->topic)) {
                        $this->topic->delete();
                }
                if (isset($this->student)) {
                        $this->student->delete();
                }
                if (isset($this->exam)) {
                        $this->exam->delete();
                }
        }

        /**
         * @covers OpenExam\Library\Core\Exam\State::getState
         * @group core
         */
        public function testGetState()
        {
                self::assertTrue($this->state->getState() != 0);

                // 
                // Before examination started:
                // 
                $this->exam->starttime = date('Y-m-d H:i:s', time() + 60);
                $this->exam->endtime = date('Y-m-d H:i:s', time() + 120);
                $this->exam->update();
                $this->state->refresh();

                self::assertTrue(($this->state->getState() & State::CONTRIBUTABLE) != 0);
                self::assertTrue(($this->state->getState() & State::CORRECTABLE) == 0);
                self::assertTrue(($this->state->getState() & State::DECODABLE) == 0);
                self::assertTrue(($this->state->getState() & State::DECODED) == 0);
                self::assertTrue(($this->state->getState() & State::EDITABLE) != 0);
                self::assertTrue(($this->state->getState() & State::EXAMINATABLE) != 0);
                self::assertTrue(($this->state->getState() & State::FINISHED) == 0);
                self::assertTrue(($this->state->getState() & State::RUNNING) == 0);
                self::assertTrue(($this->state->getState() & State::UPCOMING) != 0);

                // 
                // Ongoing examination:
                // 
                $this->exam->starttime = date('Y-m-d H:i:s', time() - 60);
                $this->exam->endtime = date('Y-m-d H:i:s', time() + 60);
                $this->exam->update();
                $this->state->refresh();

                self::assertTrue(($this->state->getState() & State::CONTRIBUTABLE) == 0);
                self::assertTrue(($this->state->getState() & State::CORRECTABLE) == 0);
                self::assertTrue(($this->state->getState() & State::DECODABLE) == 0);
                self::assertTrue(($this->state->getState() & State::DECODED) == 0);
                self::assertTrue(($this->state->getState() & State::EDITABLE) == 0);
                self::assertTrue(($this->state->getState() & State::EXAMINATABLE) != 0);
                self::assertTrue(($this->state->getState() & State::FINISHED) == 0);
                self::assertTrue(($this->state->getState() & State::RUNNING) != 0);
                self::assertTrue(($this->state->getState() & State::UPCOMING) == 0);

                // 
                // Finished examination (not yet corrected):
                // 
                $this->exam->starttime = date('Y-m-d H:i:s', time() - 120);
                $this->exam->endtime = date('Y-m-d H:i:s', time() - 60);
                $this->exam->update();
                $this->state->refresh();

                self::assertTrue(($this->state->getState() & State::CONTRIBUTABLE) == 0);
                self::assertTrue(($this->state->getState() & State::CORRECTABLE) != 0);
                self::assertTrue(($this->state->getState() & State::DECODABLE) == 0);
                self::assertTrue(($this->state->getState() & State::DECODED) == 0);
                self::assertTrue(($this->state->getState() & State::EDITABLE) == 0);
                self::assertTrue(($this->state->getState() & State::EXAMINATABLE) == 0);
                self::assertTrue(($this->state->getState() & State::FINISHED) != 0);
                self::assertTrue(($this->state->getState() & State::RUNNING) == 0);
                self::assertTrue(($this->state->getState() & State::UPCOMING) == 0);

                // 
                // Finished examination (corrected):
                // 
                $this->result = new Result();
                $this->result->create(self::$data['result']);

                $this->exam->starttime = date('Y-m-d H:i:s', time() - 120);
                $this->exam->endtime = date('Y-m-d H:i:s', time() - 60);
                $this->exam->update();
                $this->state->refresh();

                self::assertTrue(($this->state->getState() & State::CONTRIBUTABLE) == 0);
                self::assertTrue(($this->state->getState() & State::CORRECTABLE) != 0);
                self::assertTrue(($this->state->getState() & State::DECODABLE) != 0);
                self::assertTrue(($this->state->getState() & State::DECODED) == 0);
                self::assertTrue(($this->state->getState() & State::EDITABLE) == 0);
                self::assertTrue(($this->state->getState() & State::EXAMINATABLE) == 0);
                self::assertTrue(($this->state->getState() & State::FINISHED) != 0);
                self::assertTrue(($this->state->getState() & State::RUNNING) == 0);
                self::assertTrue(($this->state->getState() & State::UPCOMING) == 0);

                // 
                // Finished examination (decoded):
                // 
                $this->exam->decoded = true;
                $this->exam->update();
                $this->state->refresh();

                self::assertTrue(($this->state->getState() & State::CONTRIBUTABLE) == 0);
                self::assertTrue(($this->state->getState() & State::CORRECTABLE) == 0);
                self::assertTrue(($this->state->getState() & State::DECODABLE) != 0);
                self::assertTrue(($this->state->getState() & State::DECODED) != 0);
                self::assertTrue(($this->state->getState() & State::EDITABLE) == 0);
                self::assertTrue(($this->state->getState() & State::EXAMINATABLE) == 0);
                self::assertTrue(($this->state->getState() & State::FINISHED) != 0);
                self::assertTrue(($this->state->getState() & State::RUNNING) == 0);
                self::assertTrue(($this->state->getState() & State::UPCOMING) == 0);
        }

        /**
         * @covers OpenExam\Library\Core\Exam\State::has
         * @group core
         */
        public function testHas()
        {
                self::assertTrue($this->state->getState() != 0);

                // 
                // Before examination started:
                // 
                $this->exam->starttime = date('Y-m-d H:i:s', time() + 60);
                $this->exam->endtime = date('Y-m-d H:i:s', time() + 120);
                $this->exam->update();
                $this->state->refresh();

                self::assertTrue($this->state->has(State::CONTRIBUTABLE));
                self::assertFalse($this->state->has(State::CORRECTABLE));
                self::assertFalse($this->state->has(State::DECODABLE));
                self::assertFalse($this->state->has(State::DECODED));
                self::assertTrue($this->state->has(State::EDITABLE));
                self::assertTrue($this->state->has(State::EXAMINATABLE));
                self::assertFalse($this->state->has(State::FINISHED));
                self::assertFalse($this->state->has(State::RUNNING));
                self::assertTrue($this->state->has(State::UPCOMING));

                // 
                // Ongoing examination:
                // 
                $this->exam->starttime = date('Y-m-d H:i:s', time() - 60);
                $this->exam->endtime = date('Y-m-d H:i:s', time() + 60);
                $this->exam->update();
                $this->state->refresh();

                self::assertFalse($this->state->has(State::CONTRIBUTABLE));
                self::assertFalse($this->state->has(State::CORRECTABLE));
                self::assertFalse($this->state->has(State::DECODABLE));
                self::assertFalse($this->state->has(State::DECODED));
                self::assertFalse($this->state->has(State::EDITABLE));
                self::assertTrue($this->state->has(State::EXAMINATABLE));
                self::assertFalse($this->state->has(State::FINISHED));
                self::assertTrue($this->state->has(State::RUNNING));
                self::assertFalse($this->state->has(State::UPCOMING));

                // 
                // Finished examination (not yet corrected):
                // 
                $this->exam->starttime = date('Y-m-d H:i:s', time() - 120);
                $this->exam->endtime = date('Y-m-d H:i:s', time() - 60);
                $this->exam->update();
                $this->state->refresh();

                self::assertFalse($this->state->has(State::CONTRIBUTABLE));
                self::assertTrue($this->state->has(State::CORRECTABLE));
                self::assertFalse($this->state->has(State::DECODABLE));
                self::assertFalse($this->state->has(State::DECODED));
                self::assertFalse($this->state->has(State::EDITABLE));
                self::assertFalse($this->state->has(State::EXAMINATABLE));
                self::assertTrue($this->state->has(State::FINISHED));
                self::assertFalse($this->state->has(State::RUNNING));
                self::assertFalse($this->state->has(State::UPCOMING));

                // 
                // Finished examination (corrected):
                // 
                $this->result = new Result();
                $this->result->create(self::$data['result']);

                $this->exam->starttime = date('Y-m-d H:i:s', time() - 120);
                $this->exam->endtime = date('Y-m-d H:i:s', time() - 60);
                $this->exam->update();
                $this->state->refresh();

                self::assertFalse($this->state->has(State::CONTRIBUTABLE));
                self::assertTrue($this->state->has(State::CORRECTABLE));
                self::assertTrue($this->state->has(State::DECODABLE));
                self::assertFalse($this->state->has(State::DECODED));
                self::assertFalse($this->state->has(State::EDITABLE));
                self::assertFalse($this->state->has(State::EXAMINATABLE));
                self::assertTrue($this->state->has(State::FINISHED));
                self::assertFalse($this->state->has(State::RUNNING));
                self::assertFalse($this->state->has(State::UPCOMING));

                // 
                // Finished examination (decoded):
                // 
                $this->exam->decoded = true;
                $this->exam->update();
                $this->state->refresh();

                self::assertFalse($this->state->has(State::CONTRIBUTABLE));
                self::assertFalse($this->state->has(State::CORRECTABLE));
                self::assertTrue($this->state->has(State::DECODABLE));
                self::assertTrue($this->state->has(State::DECODED));
                self::assertFalse($this->state->has(State::EDITABLE));
                self::assertFalse($this->state->has(State::EXAMINATABLE));
                self::assertTrue($this->state->has(State::FINISHED));
                self::assertFalse($this->state->has(State::RUNNING));
                self::assertFalse($this->state->has(State::UPCOMING));
        }

        /**
         * @covers OpenExam\Library\Core\Exam\State::getFlags()
         * @group core
         */
        public function testGetFlags()
        {
                self::assertTrue(is_array($this->state->getFlags()));

                // 
                // Before examination started:
                // 
                $this->exam->starttime = date('Y-m-d H:i:s', time() + 60);
                $this->exam->endtime = date('Y-m-d H:i:s', time() + 120);
                $this->exam->update();
                $this->state->refresh();

                $flags = $this->state->getFlags();
                printf("Before examination started:\n");
                print_r($flags);

                self::assertTrue(in_array('contributable', $flags));
                self::assertFalse(in_array('correctable', $flags));
                self::assertFalse(in_array('decodable', $flags));
                self::assertFalse(in_array('decoded', $flags));
                self::assertTrue(in_array('editable', $flags));
                self::assertTrue(in_array('examinatable', $flags));
                self::assertFalse(in_array('finished', $flags));
                self::assertFalse(in_array('running', $flags));
                self::assertTrue(in_array('upcoming', $flags));

                // 
                // Ongoing examination:
                // 
                $this->exam->starttime = date('Y-m-d H:i:s', time() - 60);
                $this->exam->endtime = date('Y-m-d H:i:s', time() + 60);
                $this->exam->update();
                $this->state->refresh();

                $flags = $this->state->getFlags();
                printf("Ongoing examination:\n");
                print_r($flags);

                self::assertFalse(in_array('contributable', $flags));
                self::assertFalse(in_array('correctable', $flags));
                self::assertFalse(in_array('decodable', $flags));
                self::assertFalse(in_array('decoded', $flags));
                self::assertFalse(in_array('editable', $flags));
                self::assertTrue(in_array('examinatable', $flags));
                self::assertFalse(in_array('finished', $flags));
                self::assertTrue(in_array('running', $flags));
                self::assertFalse(in_array('upcoming', $flags));

                // 
                // Finished examination (not yet corrected):
                // 
                $this->exam->starttime = date('Y-m-d H:i:s', time() - 120);
                $this->exam->endtime = date('Y-m-d H:i:s', time() - 60);
                $this->exam->update();
                $this->state->refresh();

                $flags = $this->state->getFlags();
                printf("Finished examination (not yet corrected):\n");
                print_r($flags);

                self::assertFalse(in_array('contributable', $flags));
                self::assertTrue(in_array('correctable', $flags));
                self::assertFalse(in_array('decodable', $flags));
                self::assertFalse(in_array('decoded', $flags));
                self::assertFalse(in_array('editable', $flags));
                self::assertFalse(in_array('examinatable', $flags));
                self::assertTrue(in_array('finished', $flags));
                self::assertFalse(in_array('running', $flags));
                self::assertFalse(in_array('upcoming', $flags));

                // 
                // Finished examination (corrected):
                // 
                $this->result = new Result();
                $this->result->create(self::$data['result']);

                $this->exam->starttime = date('Y-m-d H:i:s', time() - 120);
                $this->exam->endtime = date('Y-m-d H:i:s', time() - 60);
                $this->exam->update();
                $this->state->refresh();

                $flags = $this->state->getFlags();
                printf("Finished examination (corrected):\n");
                print_r($flags);

                self::assertFalse(in_array('contributable', $flags));
                self::assertTrue(in_array('correctable', $flags));
                self::assertTrue(in_array('decodable', $flags));
                self::assertFalse(in_array('decoded', $flags));
                self::assertFalse(in_array('editable', $flags));
                self::assertFalse(in_array('examinatable', $flags));
                self::assertTrue(in_array('finished', $flags));
                self::assertFalse(in_array('running', $flags));
                self::assertFalse(in_array('upcoming', $flags));

                // 
                // Finished examination (decoded):
                // 
                $this->exam->decoded = true;
                $this->exam->update();
                $this->state->refresh();

                $flags = $this->state->getFlags();
                printf("Finished examination (decoded):\n");
                print_r($flags);

                self::assertFalse(in_array('contributable', $flags));
                self::assertFalse(in_array('correctable', $flags));
                self::assertTrue(in_array('decodable', $flags));
                self::assertTrue(in_array('decoded', $flags));
                self::assertFalse(in_array('editable', $flags));
                self::assertFalse(in_array('examinatable', $flags));
                self::assertTrue(in_array('finished', $flags));
                self::assertFalse(in_array('running', $flags));
                self::assertFalse(in_array('upcoming', $flags));
        }

}
