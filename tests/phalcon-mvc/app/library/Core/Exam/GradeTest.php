<?php

namespace OpenExam\Library\Core\Exam;

use OpenExam\Models\Exam;
use OpenExam\Models\Question;
use OpenExam\Models\Topic;
use OpenExam\Tests\Phalcon\TestCase;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2017-12-05 at 12:52:33.
 * @author Anders LÃ¶vgren (Computing Department at BMC, Uppsala University)
 */
class GradeTest extends TestCase
{

        /**
         * @var Exam 
         */
        private $_exam;
        /**
         * @var array 
         */
        private static $_data;

        /**
         * Sets up the fixture, for example, opens a network connection.
         * This method is called before a test is executed.
         */
        protected function setUp()
        {
                parent::setUp();

                self::$_data = array(
                        'exam'      => array(
                                'name'    => 'Exam 1',
                                'creator' => $this->_caller,
                                'orgunit' => 'orgunit1',
                                'grades'  => json_encode(array('data' => array('U' => 0, 'G' => 50, 'VG' => 75)))
                        ),
                        'topic'     => array(
                                'exam_id'   => 0,
                                'name'      => 'Topic 1',
                                'randomize' => 0
                        ),
                        'questions' => array(
                                array(
                                        'exam_id'  => 0,
                                        'topic_id' => 0,
                                        'score'    => 1.0,
                                        'name'     => 'Question 1',
                                        'quest'    => 'Question text',
                                        'user'     => $this->_caller
                                ),
                                array(
                                        'exam_id'  => 0,
                                        'topic_id' => 0,
                                        'score'    => 0.5,
                                        'name'     => 'Question 2',
                                        'quest'    => 'Question text',
                                        'user'     => $this->_caller
                                ),
                                array(
                                        'exam_id'  => 0,
                                        'topic_id' => 0,
                                        'score'    => 2,
                                        'name'     => 'Question 3',
                                        'quest'    => 'Question text',
                                        'user'     => $this->_caller
                                ),
                        )
                );

                $this->addExam();
                $this->addTopic();
                $this->addQuestions();
        }

        /**
         * Tears down the fixture, for example, closes a network connection.
         * This method is called after a test is executed.
         */
        protected function tearDown()
        {
                if (isset($this->_exam)) {
                        $this->_exam->delete();
                }
        }

        private function addExam()
        {
                $this->_exam = new Exam();
                $this->_exam->create(self::$_data['exam']);
        }

        private function addTopic()
        {
                self::$_data['topic']['exam_id'] = $this->_exam->id;
                $this->topic = new Topic();
                $this->topic->create(self::$_data['topic']);
        }

        private function addQuestions()
        {
                foreach (self::$_data['questions'] as $question) {
                        $question['exam_id'] = $this->_exam->id;
                        $question['topic_id'] = $this->topic->id;
                        $this->question = new Question();
                        $this->question->create($question);
                }
        }

        /**
         * @covers OpenExam\Library\Core\Exam\Grade::hasScores()
         * @group core
         */
        public function testHasScores()
        {
                // 
                // Default is to use percent:
                // 
                $this->_exam->grades = "U:0\nG:50:\nVG:75";
                $grades = new Grade($this->_exam);

                $expect = true;
                $actual = $grades->hasScores();

                self::assertNotNull($actual);
                self::assertEquals($expect, $actual);

                // 
                // Test using points explicit:
                // 
                $this->_exam->grades = "U:0p\nG:1.75p:\nVG:2.625p";
                $grades = new Grade($this->_exam);

                $expect = true;
                $actual = $grades->hasScores();

                self::assertNotNull($actual);
                self::assertEquals($expect, $actual);

                // 
                // Test using percent explicit:
                // 
                $this->_exam->grades = "U:0%\nG:50%:\nVG:75%";
                $grades = new Grade($this->_exam);

                $expect = true;
                $actual = $grades->hasScores();

                self::assertNotNull($actual);
                self::assertEquals($expect, $actual);

                // 
                // Test using suffix with space:
                // 
                $this->_exam->grades = "U:0 p\nG:1.75 p:\nVG:2.625 p";
                $grades = new Grade($this->_exam);

                $expect = true;
                $actual = $grades->hasScores();

                self::assertNotNull($actual);
                self::assertEquals($expect, $actual);
        }

        /**
         * @covers OpenExam\Library\Core\Exam\Grade::hasGrades()
         * @group core
         */
        public function testHasGrades()
        {
                // 
                // Default is to use percent:
                // 
                $this->_exam->grades = "U:0\nG:50:\nVG:75";
                $grades = new Grade($this->_exam);

                $expect = true;
                $actual = $grades->hasGrades();

                self::assertNotNull($actual);
                self::assertEquals($expect, $actual);

                // 
                // Test using points explicit:
                // 
                $this->_exam->grades = "U:0p\nG:1.75p:\nVG:2.625p";
                $grades = new Grade($this->_exam);

                $expect = true;
                $actual = $grades->hasGrades();

                self::assertNotNull($actual);
                self::assertEquals($expect, $actual);

                // 
                // Test using percent explicit:
                // 
                $this->_exam->grades = "U:0%\nG:50%:\nVG:75%";
                $grades = new Grade($this->_exam);

                $expect = true;
                $actual = $grades->hasGrades();

                self::assertNotNull($actual);
                self::assertEquals($expect, $actual);

                // 
                // Test using suffix with space:
                // 
                $this->_exam->grades = "U:0 p\nG:1.75 p:\nVG:2.625 p";
                $grades = new Grade($this->_exam);

                $expect = true;
                $actual = $grades->hasGrades();

                self::assertNotNull($actual);
                self::assertEquals($expect, $actual);
        }

        /**
         * @covers OpenExam\Library\Core\Exam\Grade::useScores
         * @group core
         */
        public function testUseScores()
        {
                // 
                // Default is to use percent:
                // 
                $this->_exam->grades = "U:0\nG:50:\nVG:75";
                $grades = new Grade($this->_exam);

                $expect = false;
                $actual = $grades->useScores();

                self::assertNotNull($actual);
                self::assertEquals($expect, $actual);

                // 
                // Test using points explicit:
                // 
                $this->_exam->grades = "U:0p\nG:1.75p:\nVG:2.625p";
                $grades = new Grade($this->_exam);

                $expect = true;
                $actual = $grades->useScores();

                self::assertNotNull($actual);
                self::assertEquals($expect, $actual);

                // 
                // Test using percent explicit:
                // 
                $this->_exam->grades = "U:0%\nG:50%:\nVG:75%";
                $grades = new Grade($this->_exam);

                $expect = false;
                $actual = $grades->useScores();

                self::assertNotNull($actual);
                self::assertEquals($expect, $actual);

                // 
                // Test using suffix with space:
                // 
                $this->_exam->grades = "U:0 p\nG:1.75 p:\nVG:2.625 p";
                $grades = new Grade($this->_exam);

                $expect = true;
                $actual = $grades->useScores();

                self::assertNotNull($actual);
                self::assertEquals($expect, $actual);
        }

        /**
         * @covers OpenExam\Library\Core\Exam\Grade::getScores
         * @group core
         */
        public function testGetScores()
        {
                // 
                // Test using default:
                // 
                $this->_exam->grades = "U:0\nG:50:\nVG:75";
                $grades = new Grade($this->_exam);

                $expect = array('U' => 0, 'G' => 1.75, 'VG' => 2.625);
                $actual = $grades->getScores();

                self::assertNotNull($actual);
                self::assertEquals($expect, $actual);

                // 
                // Test using points:
                // 
                $this->_exam->grades = "U:0p\nG:1.75p:\nVG:2.625p";
                $grades = new Grade($this->_exam);

                $expect = array('U' => 0, 'G' => 1.75, 'VG' => 2.625);
                $actual = $grades->getScores();

                self::assertNotNull($actual);
                self::assertEquals($expect, $actual);

                // 
                // Test using percent:
                // 
                $this->_exam->grades = "U:0%\nG:50%:\nVG:75%";
                $grades = new Grade($this->_exam);

                $expect = array('U' => 0, 'G' => 1.75, 'VG' => 2.625);
                $actual = $grades->getScores();

                self::assertNotNull($actual);
                self::assertEquals($expect, $actual);
        }

        /**
         * @covers OpenExam\Library\Core\Exam\Grade::getGrades
         * @group core
         */
        public function testGetGrades()
        {
                // 
                // Test using default:
                // 
                $this->_exam->grades = "U:0\nG:50:\nVG:75";
                $grades = new Grade($this->_exam);

                $expect = array('U' => 0, 'G' => 50, 'VG' => 75);
                $actual = $grades->getGrades();

                self::assertNotNull($actual);
                self::assertEquals($expect, $actual);

                // 
                // Test using points:
                // 
                $this->_exam->grades = "U:0p\nG:1.75p:\nVG:2.625p";
                $grades = new Grade($this->_exam);

                $expect = array('U' => 0, 'G' => 50, 'VG' => 75);
                $actual = $grades->getGrades();

                self::assertNotNull($actual);
                self::assertEquals($expect, $actual);

                // 
                // Test using percent:
                // 
                $this->_exam->grades = "U:0%\nG:50%:\nVG:75%";
                $grades = new Grade($this->_exam);

                $expect = array('U' => 0, 'G' => 50, 'VG' => 75);
                $actual = $grades->getGrades();

                self::assertNotNull($actual);
                self::assertEquals($expect, $actual);
        }

        /**
         * @covers OpenExam\Library\Core\Exam\Grade::getGrade
         * @group core
         */
        public function testGetGrade()
        {
                $this->_exam->grades = "U:0p\nG:1.75p:\nVG:2.625p";
                $grades = new Grade($this->_exam);

                $expect = 'U';
                $actual = $grades->getGrade(0);

                self::assertNotNull($actual);
                self::assertEquals($expect, $actual);

                $expect = 'U';
                $actual = $grades->getGrade(1);

                self::assertNotNull($actual);
                self::assertEquals($expect, $actual);

                $expect = 'U';
                $actual = $grades->getGrade(1.74);

                self::assertNotNull($actual);
                self::assertEquals($expect, $actual);

                $expect = 'G';
                $actual = $grades->getGrade(1.75);

                self::assertNotNull($actual);
                self::assertEquals($expect, $actual);

                $expect = 'G';
                $actual = $grades->getGrade(2.624);

                self::assertNotNull($actual);
                self::assertEquals($expect, $actual);

                $expect = 'VG';
                $actual = $grades->getGrade(2.625);

                self::assertNotNull($actual);
                self::assertEquals($expect, $actual);

                $expect = 'VG';
                $actual = $grades->getGrade(3);

                self::assertNotNull($actual);
                self::assertEquals($expect, $actual);
        }

        /**
         * @covers OpenExam\Library\Core\Exam\Grade::isHighest
         * @group core
         */
        public function testIsHighest()
        {
                $this->_exam->grades = "U:0\nG:50:\nVG:75";
                $grades = new Grade($this->_exam);

                $expect = false;
                $actual = $grades->isHighest('U');

                self::assertNotNull($actual);
                self::assertEquals($expect, $actual);

                $expect = false;
                $actual = $grades->isHighest('G');

                self::assertNotNull($actual);
                self::assertEquals($expect, $actual);

                $expect = true;
                $actual = $grades->isHighest('VG');

                self::assertNotNull($actual);
                self::assertEquals($expect, $actual);

                $expect = false;
                $actual = $grades->isHighest('MVG');

                self::assertNotNull($actual);
                self::assertEquals($expect, $actual);
        }

        /**
         * @covers OpenExam\Library\Core\Exam\Grade::isLowest
         * @group core
         */
        public function testIsLowest()
        {
                $this->_exam->grades = "U:0\nG:50:\nVG:75";
                $grades = new Grade($this->_exam);

                $expect = false;
                $actual = $grades->isLowest('VG');

                self::assertNotNull($actual);
                self::assertEquals($expect, $actual);

                $expect = false;
                $actual = $grades->isLowest('G');

                self::assertNotNull($actual);
                self::assertEquals($expect, $actual);

                $expect = true;
                $actual = $grades->isLowest('U');

                self::assertNotNull($actual);
                self::assertEquals($expect, $actual);

                $expect = false;
                $actual = $grades->isLowest('MVG');

                self::assertNotNull($actual);
                self::assertEquals($expect, $actual);
        }

        /**
         * @covers OpenExam\Library\Core\Exam\Grade::isClose
         * @group core
         */
        public function testIsClose()
        {
                $this->_exam->grades = "U:0\nG:50:\nVG:75";
                $grades = new Grade($this->_exam);

                // 
                // Far from close:
                // 
                $expect = false;
                $actual = $grades->isClose(0);

                self::assertNotNull($actual);
                self::assertEquals($expect, $actual);

                // 
                // More than 10% from G:
                // 
                $expect = false;
                $actual = $grades->isClose(0.40 * $grades->getMaximum());

                self::assertNotNull($actual);
                self::assertEquals($expect, $actual);

                // 
                // Exactly 5% from G:
                // 
                $expect = true;
                $actual = $grades->isClose(0.45 * $grades->getMaximum());

                self::assertNotNull($actual);
                self::assertEquals($expect, $actual);

                // 
                // Less than 5% from G:
                // 
                $expect = true;
                $actual = $grades->isClose(0.48 * $grades->getMaximum());

                self::assertNotNull($actual);
                self::assertEquals($expect, $actual);

                // 
                // Already has G, but far from VG:
                // 
                $expect = false;
                $actual = $grades->isClose(0.5 * $grades->getMaximum());

                self::assertNotNull($actual);
                self::assertEquals($expect, $actual);

                // 
                // Close to VG:
                // 
                $expect = true;
                $actual = $grades->isClose(0.72 * $grades->getMaximum());

                self::assertNotNull($actual);
                self::assertEquals($expect, $actual);

                // 
                // On border of VG:
                // 
                $expect = true;
                $actual = $grades->isClose(0.75 * $grades->getMaximum());

                self::assertNotNull($actual);
                self::assertEquals($expect, $actual);

                // 
                // Passed limit of VG:
                // 
                $expect = false;
                $actual = $grades->isClose(0.90 * $grades->getMaximum());

                self::assertNotNull($actual);
                self::assertEquals($expect, $actual);

                // 
                // More than default 5% from G, but different threshold:
                // 
                $expect = true;
                $actual = $grades->isClose(0.42 * $grades->getMaximum(), 10);

                self::assertNotNull($actual);
                self::assertEquals($expect, $actual);

                // 
                // Less than default 5% from G, but different threshold:
                // 
                $expect = false;
                $actual = $grades->isClose(0.48 * $grades->getMaximum(), 1);

                self::assertNotNull($actual);
                self::assertEquals($expect, $actual);

                // 
                // Exactly on threshold:
                // 
                $expect = true;
                $actual = $grades->isClose(0.48 * $grades->getMaximum(), 2);

                self::assertNotNull($actual);
                self::assertEquals($expect, $actual);
        }

        /**
         * @covers OpenExam\Library\Core\Exam\Grade::getMissing
         * @group core
         */
        public function testGetMissing()
        {
                $this->_exam->grades = "U:0p\nG:1.5p:\nVG:2.5p";
                $grades = new Grade($this->_exam);

                // 
                // No score at all:
                // 
                $expect = 1.5;
                $actual = $grades->getMissing(0);

                self::assertNotNull($actual);
                self::assertEquals($expect, $actual);

                // 
                // Is 0.25p from G:
                // 
                $expect = 0.25;
                $actual = $grades->getMissing(1.25);

                self::assertNotNull($actual);
                self::assertEquals($expect, $actual);

                // 
                // Border of G. Is 1p from VG:
                // 
                $expect = 1;
                $actual = $grades->getMissing(1.5);

                self::assertNotNull($actual);
                self::assertEquals($expect, $actual);

                // 
                // Close to VG:
                // 
                $expect = 0.05;
                $actual = $grades->getMissing(2.45);

                self::assertNotNull($actual);
                self::assertEquals($expect, $actual);

                // 
                // Passed VG:
                // 
                $expect = -0.3;
                $actual = $grades->getMissing(2.8);

                self::assertNotNull($actual);
                self::assertEquals($expect, $actual);

                // 
                // Has maximum score:
                // 
                $expect = -1;
                $actual = $grades->getMissing(3.5);

                self::assertNotNull($actual);
                self::assertEquals($expect, $actual);
        }

}
