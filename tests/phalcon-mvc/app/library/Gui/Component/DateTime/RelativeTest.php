<?php

/*
 * Copyright (C) 2017-2018 The OpenExam Project
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */

namespace OpenExam\Library\Gui\Component\DateTime;

use OpenExam\Tests\Phalcon\TestCase;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2017-10-26 at 22:49:48.
 */
class RelativeTest extends TestCase {

  /**
   * @covers OpenExam\Library\Gui\Component\DateTime\Relative::text
   * @group gui
   */
  public function testText() {
    //
    // Test without start and endtime.
    //
    $sstamp = false;
    $estamp = false;

    $sdate = Relative::UNKNOWN;
    $stime = null;

    $edate = Relative::INFINITY;
    $etime = null;

    $object = new Relative($sstamp, $estamp);

    $expect = $sdate;
    $actual = $object->startdate;
    self::assertNotNull($actual);
    self::assertEquals($actual, $expect);

    $expect = $edate;
    $actual = $object->enddate;
    self::assertNotNull($actual);
    self::assertEquals($actual, $expect);

    $expect = $stime;
    $actual = $object->starttime;
    self::assertNull($actual);
    self::assertEquals($actual, $expect);

    $expect = $etime;
    $actual = $object->endtime;
    self::assertNull($actual);
    self::assertEquals($actual, $expect);

    $expect = "";
    $actual = $object->text();
    self::assertNotNull($actual);
    self::assertEquals($actual, $expect);

    //
    // Test with start but no endtime.
    //
    $sstamp = time();
    $estamp = false;

    $sdate = strftime("%x", $sstamp);
    $stime = strftime("%H:%M", $sstamp);

    $edate = Relative::INFINITY;
    $etime = null;

    $object = new Relative($sstamp, $estamp);

    $expect = $sdate;
    $actual = $object->startdate;
    self::assertNotNull($actual);
    self::assertEquals($actual, $expect);

    $expect = $edate;
    $actual = $object->enddate;
    self::assertNotNull($actual);
    self::assertEquals($actual, $expect);

    $expect = $stime;
    $actual = $object->starttime;
    self::assertNotNull($actual);
    self::assertEquals($actual, $expect);

    $expect = $etime;
    $actual = $object->endtime;
    self::assertNull($actual);
    self::assertEquals($actual, $expect);

    $expect = "";
    $actual = $object->text();
    self::assertNotNull($actual);
    self::assertEquals($actual, $expect);

    //
    // Test with no start but endtime set.
    //
    $sstamp = false;
    $estamp = time() + 374622;

    $sdate = Relative::UNKNOWN;
    $stime = null;

    $edate = strftime("%x", $estamp);
    $etime = strftime("%H:%M", $estamp);

    $object = new Relative($sstamp, $estamp);

    $expect = $sdate;
    $actual = $object->startdate;
    self::assertNotNull($actual);
    self::assertEquals($actual, $expect);

    $expect = $edate;
    $actual = $object->enddate;
    self::assertNotNull($actual);
    self::assertEquals($actual, $expect);

    $expect = $stime;
    $actual = $object->starttime;
    self::assertNull($actual);
    self::assertEquals($actual, $expect);

    $expect = $etime;
    $actual = $object->endtime;
    self::assertNotNull($actual);
    self::assertEquals($actual, $expect);

    $expect = sprintf("%s %s", $edate, $etime);
    $actual = $object->text();
    self::assertNotNull($actual);
    self::assertEquals($actual, $expect);

    //
    // Test with start and endtime.
    //
    $sstamp = time();
    $estamp = time() + 374622;

    $sdate = strftime("%x", $sstamp);
    $stime = strftime("%H:%M", $sstamp);

    $edate = strftime("%x", $estamp);
    $etime = strftime("%H:%M", $estamp);

    $object = new Relative($sstamp, $estamp);

    $expect = $sdate;
    $actual = $object->startdate;
    self::assertNotNull($actual);
    self::assertEquals($actual, $expect);

    $expect = $edate;
    $actual = $object->enddate;
    self::assertNotNull($actual);
    self::assertEquals($actual, $expect);

    $expect = $stime;
    $actual = $object->starttime;
    self::assertNotNull($actual);
    self::assertEquals($actual, $expect);

    $expect = $etime;
    $actual = $object->endtime;
    self::assertNotNull($actual);
    self::assertEquals($actual, $expect);

    $expect = sprintf("%s %s", $edate, $etime);
    $actual = $object->text();
    self::assertNotNull($actual);
    self::assertEquals($actual, $expect);

    //
    // Test with same date:
    //
    $sstamp = strtotime("2017-10-27 08:45");
    $estamp = strtotime("2017-10-27 11:30");

    $sdate = strftime("%x", $sstamp);
    $stime = strftime("%H:%M", $sstamp);

    $edate = strftime("%x", $estamp);
    $etime = strftime("%H:%M", $estamp);

    $object = new Relative($sstamp, $estamp);

    $expect = $sdate;
    $actual = $object->startdate;
    self::assertNotNull($actual);
    self::assertEquals($actual, $expect);

    $expect = $edate;
    $actual = $object->enddate;
    self::assertNotNull($actual);
    self::assertEquals($actual, $expect);

    $expect = $stime;
    $actual = $object->starttime;
    self::assertNotNull($actual);
    self::assertEquals($actual, $expect);

    $expect = $etime;
    $actual = $object->endtime;
    self::assertNotNull($actual);
    self::assertEquals($actual, $expect);

    $expect = sprintf("%s", $etime);
    $actual = $object->text();
    self::assertNotNull($actual);
    self::assertEquals($actual, $expect);
  }

}
