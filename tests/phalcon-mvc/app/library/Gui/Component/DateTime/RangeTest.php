<?php

namespace OpenExam\Library\Gui\Component\DateTime;

use OpenExam\Library\Gui\Component\DateTime\Range;
use OpenExam\Tests\Phalcon\TestCase;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2017-10-26 at 22:49:37.
 */
class RangeTest extends TestCase
{

        /**
         * @covers OpenExam\Library\Gui\Component\DateTime\Range::text
         * @group gui
         */
        public function testText()
        {
                // 
                // Test without start and endtime.
                // 
                $sstamp = false;
                $estamp = false;

                $sdate = Range::UNKNOWN;
                $stime = null;

                $edate = Range::INFINITY;
                $etime = null;

                $object = new Range($sstamp, $estamp);

                $expect = $sdate;
                $actual = $object->startdate;
                self::assertNotNull($actual);
                self::assertEquals($actual, $expect);

                $expect = $edate;
                $actual = $object->enddate;
                self::assertNotNull($actual);
                self::assertEquals($actual, $expect);

                $expect = $stime;
                $actual = $object->starttime;
                self::assertNull($actual);
                self::assertEquals($actual, $expect);

                $expect = $etime;
                $actual = $object->endtime;
                self::assertNull($actual);
                self::assertEquals($actual, $expect);

                $expect = sprintf("%s -> %s", $sdate, $edate);
                $actual = $object->text();
                self::assertNotNull($actual);
                self::assertEquals($actual, $expect);

                // 
                // Test with start but no endtime.
                // 
                $sstamp = time();
                $estamp = false;

                $sdate = strftime("%x", $sstamp);
                $stime = strftime("%H:%M", $sstamp);

                $edate = Range::INFINITY;
                $etime = null;

                $object = new Range($sstamp, $estamp);

                $expect = $sdate;
                $actual = $object->startdate;
                self::assertNotNull($actual);
                self::assertEquals($actual, $expect);

                $expect = $edate;
                $actual = $object->enddate;
                self::assertNotNull($actual);
                self::assertEquals($actual, $expect);

                $expect = $stime;
                $actual = $object->starttime;
                self::assertNotNull($actual);
                self::assertEquals($actual, $expect);

                $expect = $etime;
                $actual = $object->endtime;
                self::assertNull($actual);
                self::assertEquals($actual, $expect);

                $expect = sprintf("%s %s -> %s", $sdate, $stime, $edate);
                $actual = $object->text();
                self::assertNotNull($actual);
                self::assertEquals($actual, $expect);

                // 
                // Test without start but endtime set.
                // 
                $sstamp = false;
                $estamp = time();

                $sdate = Range::UNKNOWN;
                $stime = null;

                $edate = strftime("%x", $estamp);
                $etime = strftime("%H:%M", $estamp);

                $object = new Range($sstamp, $estamp);

                $expect = $sdate;
                $actual = $object->startdate;
                self::assertNotNull($actual);
                self::assertEquals($actual, $expect);

                $expect = $edate;
                $actual = $object->enddate;
                self::assertNotNull($actual);
                self::assertEquals($actual, $expect);

                $expect = $stime;
                $actual = $object->starttime;
                self::assertNull($actual);
                self::assertEquals($actual, $expect);

                $expect = $etime;
                $actual = $object->endtime;
                self::assertNotNull($actual);
                self::assertEquals($actual, $expect);

                $expect = sprintf("%s -> %s %s", $sdate, $edate, $etime);
                $actual = $object->text();
                self::assertNotNull($actual);
                self::assertEquals($actual, $expect);

                // 
                // Test with start and endtime.
                // 
                $sstamp = time();
                $estamp = time() + 374622;

                $sdate = strftime("%x", $sstamp);
                $stime = strftime("%H:%M", $sstamp);

                $edate = strftime("%x", $estamp);
                $etime = strftime("%H:%M", $estamp);

                $object = new Range($sstamp, $estamp);

                $expect = $sdate;
                $actual = $object->startdate;
                self::assertNotNull($actual);
                self::assertEquals($actual, $expect);

                $expect = $edate;
                $actual = $object->enddate;
                self::assertNotNull($actual);
                self::assertEquals($actual, $expect);

                $expect = $stime;
                $actual = $object->starttime;
                self::assertNotNull($actual);
                self::assertEquals($actual, $expect);

                $expect = $etime;
                $actual = $object->endtime;
                self::assertNotNull($actual);
                self::assertEquals($actual, $expect);

                $expect = sprintf("%s %s -> %s %s", $sdate, $stime, $edate, $etime);
                $actual = $object->text();
                self::assertNotNull($actual);
                self::assertEquals($actual, $expect);
                
                // 
                // Test with same date:
                // 
                $sstamp = strtotime("2017-10-27 08:45");
                $estamp = strtotime("2017-10-27 11:30");

                $sdate = strftime("%x", $sstamp);
                $stime = strftime("%H:%M", $sstamp);

                $edate = strftime("%x", $estamp);
                $etime = strftime("%H:%M", $estamp);

                $object = new Range($sstamp, $estamp);

                $expect = $sdate;
                $actual = $object->startdate;
                self::assertNotNull($actual);
                self::assertEquals($actual, $expect);

                $expect = $edate;
                $actual = $object->enddate;
                self::assertNotNull($actual);
                self::assertEquals($actual, $expect);

                $expect = $stime;
                $actual = $object->starttime;
                self::assertNotNull($actual);
                self::assertEquals($actual, $expect);

                $expect = $etime;
                $actual = $object->endtime;
                self::assertNotNull($actual);
                self::assertEquals($actual, $expect);

                $expect = sprintf("%s %s -> %s", $sdate, $stime, $etime);
                $actual = $object->text();
                self::assertNotNull($actual);
                self::assertEquals($actual, $expect);
        }

}
