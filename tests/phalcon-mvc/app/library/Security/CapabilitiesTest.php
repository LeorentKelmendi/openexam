<?php

/*
 * Copyright (C) 2014-2018 The OpenExam Project
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */

namespace OpenExam\Library\Security;

use OpenExam\Tests\Phalcon\TestCase;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2014-10-27 at 15:06:11.
 * @author Anders LÃ¶vgren (Computing Department at BMC, Uppsala University)
 */
class CapabilitiesTest extends TestCase
{

        /**
         * @var Capabilities
         */
        private $_object;
        /**
         * Test access map.
         * @var array 
         */
        private static $_access = array(
                'permissions' => array(
                        '*'      => '*',
                        'read'   => 'read',
                        'modify' => array('read', 'update'),
                        'manage' => array('read', 'update', 'delete'),
                        'full'   => array('create', 'read', 'update', 'delete')
                ),
                'roles'       => array(
                        'teacher'     => array(
                                'exam' => '*'
                        ),
                        'creator'     => array(
                                'exam'     => 'manage',
                                'question' => '*',
                                'student'  => 'read'
                        ),
                        'contributor' => array(
                                'exam'     => 'read',
                                'question' => '*',
                        )
                )
        );

        /**
         * Sets up the fixture, for example, opens a network connection.
         * This method is called before a test is executed.
         */
        protected function setUp()
        {
                $this->_object = new Capabilities(self::$_access);
        }

        /**
         * Tears down the fixture, for example, closes a network connection.
         * This method is called after a test is executed.
         */
        protected function tearDown()
        {
                
        }

        /**
         * @covers OpenExam\Library\Security\Capabilities::getRoles
         * @group security
         */
        public function testGetRoles()
        {
                $expect = array('teacher', 'creator', 'contributor');
                $actual = $this->_object->getRoles();
                self::assertNotNull($actual);
                self::assertTrue(is_array($actual));
                self::assertEquals($expect, $actual);

                $expect = array('creator', 'contributor');
                $actual = $this->_object->getRoles('question');
                self::assertNotNull($actual);
                self::assertTrue(is_array($actual));
                self::assertEquals($expect, array_keys($actual));

                $expect = false;
                $actual = $this->_object->getRoles('missing');
                self::assertNotNull($actual);
                self::assertEquals($expect, $actual);
        }

        /**
         * @covers OpenExam\Library\Security\Capabilities::getResources
         * @group security
         */
        public function testGetResources()
        {
                $expect = array('exam', 'question', 'student');
                $actual = $this->_object->getResources();
                self::assertNotNull($actual);
                self::assertTrue(is_array($actual));
                self::assertEquals($expect, $actual);

                $expect = array('exam', 'question');
                $actual = $this->_object->getResources('contributor');
                self::assertNotNull($actual);
                self::assertTrue(is_array($actual));
                self::assertEquals($expect, array_keys($actual));

                $expect = false;
                $actual = $this->_object->getResources('missing');
                self::assertNotNull($actual);
                self::assertEquals($expect, $actual);
        }

        /**
         * @covers OpenExam\Library\Security\Capabilities::getPermissions
         * @group security
         */
        public function testGetPermissions()
        {
                $expect = array('read', 'update', 'delete');
                $actual = $this->_object->getPermissions('creator', 'exam');
                self::assertNotNull($actual);
                self::assertTrue(is_array($actual));
                self::assertEquals($expect, $actual);

                $expect = false;
                $actual = $this->_object->getPermissions('student', 'missing');
                self::assertNotNull($actual);
                self::assertEquals($expect, $actual);

                $expect = false;
                $actual = $this->_object->getPermissions('missing', 'exam');
                self::assertNotNull($actual);
                self::assertEquals($expect, $actual);
        }

        /**
         * @covers OpenExam\Library\Security\Capabilities::hasResource
         * @group security
         */
        public function testHasResource()
        {
                foreach (array(
                    'exam'     => true,
                    'question' => true,
                    'session'  => false,
                    'student'  => true,
                    'ansawer'  => false
                ) as $resource => $expect) {
                        $actual = $this->_object->hasResource($resource);
                        self::assertNotNull($actual);
                        self::assertTrue(is_bool($actual));
                        self::assertEquals($expect, $actual);
                }
        }

        /**
         * @covers OpenExam\Library\Security\Capabilities::hasPermission
         * @group security
         */
        public function testHasPermission()
        {
                foreach (array(
                    'create'  => false,
                    'read'    => true,
                    'update'  => true,
                    'delete'  => true,
                    'missing' => false
                ) as $action => $expect) {
                        $actual = $this->_object->hasPermission('creator', 'exam', $action);
                        self::assertNotNull($actual);
                        self::assertTrue(is_bool($actual));
                        self::assertEquals($expect, $actual);
                }
        }

        /**
         * @covers OpenExam\Library\Security\Capabilities::hasCapability
         * @group security
         */
        public function testHasCapability()
        {
                $this->markTestSkipped("Depends on runtime and system config.");
        }

        /**
         * @covers OpenExam\Library\Security\Capabilities::getCapabilities
         * @group security
         */
        public function testGetCapabilities()
        {
                $actual = $this->_object->getCapabilities();
                self::assertNotNull($actual);
                self::assertTrue(is_array($actual));
        }

        /**
         * @covers OpenExam\Library\Security\Capabilities::getFilter
         * @group security
         */
        public function testGetFilter()
        {
                $expect = Capabilities::CHECK_ALL;

                $actual = Capabilities::getFilter(true);
                self::assertEquals($expect, $actual);

                $actual = Capabilities::getFilter("all");
                self::assertEquals($expect, $actual);

                $actual = Capabilities::getFilter(array("all"));
                self::assertEquals($expect, $actual);

                $actual = Capabilities::getFilter(array("static", "role", "action"));
                self::assertEquals($expect, $actual);

                $actual = Capabilities::getFilter(Capabilities::CHECK_ALL);
                self::assertEquals($expect, $actual);

                $actual = Capabilities::getFilter(Capabilities::CHECK_STATIC | Capabilities::CHECK_ROLE | Capabilities::CHECK_ACTION);
                self::assertEquals($expect, $actual);

                $expect = Capabilities::CHECK_MIN;
                $actual = Capabilities::getFilter(Capabilities::CHECK_MIN - 1);
                self::assertEquals($expect, $actual);

                $expect = Capabilities::CHECK_MAX;
                $actual = Capabilities::getFilter(Capabilities::CHECK_MAX + 1);
                self::assertEquals($expect, $actual);
        }

}
