<?php

namespace OpenExam\Library\Security;

use OpenExam\Tests\Phalcon\TestCase;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2014-09-24 at 05:03:10.
 */
class AclTest extends TestCase
{

        /**
         * @var Acl
         */
        protected $object;
        protected $access;

        /**
         * Sets up the fixture, for example, opens a network connection.
         * This method is called before a test is executed.
         */
        protected function setUp()
        {
                $this->access = require(CONFIG_DIR . '/access.def');
                $this->object = new Acl($this->access);
        }

        /**
         * Tears down the fixture, for example, closes a network connection.
         * This method is called after a test is executed.
         */
        protected function tearDown()
        {
                
        }

        /**
         * @covers OpenExam\Library\Security\Acl::getAcl
         * @group security
         */
        public function testGetAcl()
        {
                $actual = $this->object->getAcl();
                self::assertNotNull($actual);
                self::assertInstanceOf('Phalcon\Acl\Adapter\Memory', $actual);
        }

        /**
         * @group security
         */
        public function testConfig()
        {
                self::assertTrue(is_array($this->access));
                self::assertTrue(isset($this->access['roles']));
                self::assertTrue(isset($this->access['permissions']));
                self::assertTrue(count($this->access['roles']) > 0);
                self::assertTrue(count($this->access['permissions']) > 0);
        }

        /**
         * @covers OpenExam\Library\Security\Acl::isAllowed
         * @group security
         */
        public function testIsAllowed()
        {
                // 
                // These should all succeed:
                // 
                foreach ($this->access['roles'] as $role => $resources) {
                        if (is_array($resources)) {
                                $this->checkResources($role, $resources);
                        } elseif (is_string($resources)) {
                                $this->checkPermission($role, $resources, $resources, true);
                        } else {
                                fail("Impossible!");
                        }
                }

                // 
                // These should all fail:
                // 
                $this->checkPermission('custom', 'question', 'read', false);            // non-existing role (custom)
                $this->checkPermission('invigilator', 'panncake', 'read', false);       // non-existing resource (panncake)
                $this->checkPermission('invigilator', 'exam', 'toast', false);          // non-existing action (toast)
        }

        /**
         * Check resources.
         * @param string $role The role.
         * @param array $resources Array of resources.
         * @group security
         */
        private function checkResources($role, $resources)
        {
                foreach ($resources as $resource => $action) {
                        $actions = $this->access['permissions'][$action];
                        if (is_array($actions)) {
                                $this->checkActions($role, $resource, $actions);
                        } elseif (is_string($actions)) {
                                $this->checkPermission($role, $resource, $actions, true);
                        } else {
                                fail("Impossible!");
                        }
                }
        }

        /**
         * Check actions.
         * @param string $role The role.
         * @param string $resource The resource.
         * @param array $actions Array of actions.
         */
        private function checkActions($role, $resource, $actions)
        {
                foreach ($actions as $action) {
                        $this->checkPermission($role, $resource, $action, true);
                }
        }

        /**
         * Check that role has permission to perform action on a resource.
         * @param string $role The role.
         * @param string $resource The resource.
         * @param string $action The action to perform.
         */
        private function checkPermission($role, $resource, $action, $expect)
        {
                $actual = $this->object->isAllowed($role, $resource, $action);
                self::info("role=%s, resource=%s, action=%s: allowed=%s", $role, $resource, $action, $actual ? 'yes' : 'no');
                self::assertEquals($expect, $actual);
        }

}
