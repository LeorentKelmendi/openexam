<?php

namespace OpenExam\Library\Security;

use OpenExam\Tests\Phalcon\TestCase;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-09-02 at 11:26:01.
 */
class UserTest extends TestCase
{

        /**
         * @var User
         */
        protected $object;
        private static $user = 'user1';
        private static $domain = 'domain1';

        /**
         * Sets up the fixture, for example, opens a network connection.
         * This method is called before a test is executed.
         */
        protected function setUp()
        {
                $this->object = new User(self::$user, self::$domain);
        }

        /**
         * Tears down the fixture, for example, closes a network connection.
         * This method is called after a test is executed.
         */
        protected function tearDown()
        {
                
        }

        /**
         * @covers OpenExam\Library\Security\User::__construct
         * @group security
         */
        public function testConstructor()
        {
                // 
                // test User(user, domain):
                // 
                $user = self::$user;
                $domain = self::$domain;
                $this->object = new User($user, $domain);
                $expect = sprintf("%s@%s", $user, $domain);
                $actual = $this->object->getPrincipalName();
                self::assertEquals($expect, $actual);

                // 
                // test User(principal):
                // 
                $user = sprintf("%s@%s", self::$user, self::$domain);
                $this->object = new User($user);
                $expect = $user;
                $actual = $this->object->getPrincipalName();
                self::assertEquals($expect, $actual);

                // 
                // test User(user): -> using default domain
                // 
                $user = self::$user;
                $domain = $this->config->user->domain;
                $this->object = new User($user);
                $expect = sprintf("%s@%s", self::$user, $domain);
                $actual = $this->object->getPrincipalName();
                self::assertEquals($expect, $actual);

                // 
                // test User(user): -> without default domain (throws)
                // 
                $user = self::$user;
                try {
                        $this->object = new User($user);
                        self::fail();
                } catch (\Exception $exception) {
                        
                }

                // 
                // test User(null): -> empty user
                // 
                $user = self::$user;
                try {
                        $this->object = new User();
                } catch (\Exception $exception) {
                        self::fail();
                }

                // 
                // test User(user, null, roles): -> "act-as" (impersonation).
                // 
                $roles = array(
                        0 => array(Roles::admin, Roles::teacher),
                        1 => array(Roles::contributor),
                        2 => array(Roles::decoder, Roles::invigilator),
                        3 => array(Roles::invigilator)
                );
                $this->object = new User($user, null, $roles);
                self::assertTrue(count($this->object->roles->getRoles(0)) == 5);
                self::assertTrue(count($this->object->roles->getRoles(1)) == 1);
                self::assertTrue(count($this->object->roles->getRoles(2)) == 2);
                self::assertTrue(count($this->object->roles->getRoles(3)) == 1);
                self::assertTrue(count($this->object->roles->getRoles(4)) == 0);
                self::assertTrue(count($this->object->roles->getAllRoles()) == 4);
                self::assertTrue(count($this->object->roles->getAllRoles()[1]) == 1);
                
                self::assertTrue($this->object->roles->hasRole(Roles::admin));
                self::assertTrue($this->object->roles->hasRole(Roles::teacher));
                self::assertTrue($this->object->roles->hasRole(Roles::contributor));
                self::assertTrue($this->object->roles->hasRole(Roles::decoder));
                self::assertTrue($this->object->roles->hasRole(Roles::invigilator));
                
                self::assertTrue($this->object->roles->hasRole(Roles::decoder, 2));
                self::assertTrue($this->object->roles->hasRole(Roles::invigilator, 2));
                self::assertFalse($this->object->roles->hasRole(Roles::decoder, 3));
        }

        /**
         * @covers OpenExam\Library\Security\User::roles
         * @group security
         */
        public function testRolesProperty()
        {
                $roles = $this->object->roles;
                self::assertNotNull($roles);
                self::assertInstanceOf('\OpenExam\Library\Security\Roles', $roles);
        }

        /**
         * @covers OpenExam\Library\Security\User::getPrincipalName
         * @group security
         */
        public function testGetPrincipalName()
        {
                $principal = sprintf("%s@%s", self::$user, self::$domain);
                self::assertNotNull($this->object->getPrincipalName());
                self::assertNotEmpty($this->object->getPrincipalName());
                self::assertTrue($this->object->getPrincipalName() == $principal);

                $this->object = new User();
                self::assertNull($this->object->getPrincipalName());
        }

        /**
         * @covers OpenExam\Library\Security\User::getDomain
         * @group security
         */
        public function testGetDomain()
        {
                self::assertNotNull($this->object->getDomain());
                self::assertNotEmpty($this->object->getDomain());
                self::assertTrue($this->object->getDomain() == self::$domain);

                $this->object = new User();
                self::assertNull($this->object->getDomain());
        }

        /**
         * @covers OpenExam\Library\Security\User::getUser
         * @group security
         */
        public function testGetUser()
        {
                self::assertNotNull($this->object->getUser());
                self::assertNotEmpty($this->object->getUser());
                self::assertTrue($this->object->getUser() == self::$user);

                $this->object = new User();
                self::assertNull($this->object->getUser());
        }

}
