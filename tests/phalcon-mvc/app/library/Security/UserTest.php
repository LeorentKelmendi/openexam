<?php

namespace OpenExam\Library\Security;

use OpenExam\Tests\Phalcon\TestCase;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-09-02 at 11:26:01.
 * 
 * @author Anders LÃ¶vgren (Computing Department at BMC, Uppsala University)
 */
class UserTest extends TestCase
{

        /**
         * @var User
         */
        private $_object;
        private static $_user = 'user1';
        private static $_domain = 'domain1';
        private static $_role = 'role1';

        /**
         * Sets up the fixture, for example, opens a network connection.
         * This method is called before a test is executed.
         */
        protected function setUp()
        {
                $this->_object = new User(self::$_user, self::$_domain, self::$_role);
        }

        /**
         * Tears down the fixture, for example, closes a network connection.
         * This method is called after a test is executed.
         */
        protected function tearDown()
        {
                
        }

        /**
         * @covers OpenExam\Library\Security\User::__construct
         * @group security
         * @expectedException Exception
         */
        public function testConstructor()
        {

                // 
                // test User(user, domain):
                // 
                $user = self::$_user;
                $domain = self::$_domain;
                $this->_object = new User($user, $domain);
                $expect = sprintf("%s@%s", $user, $domain);
                $actual = $this->_object->getPrincipalName();
                self::assertEquals($expect, $actual);

                // 
                // test User(principal):
                // 
                $user = sprintf("%s@%s", self::$_user, self::$_domain);
                $this->_object = new User($user);
                $expect = $user;
                $actual = $this->_object->getPrincipalName();
                self::assertEquals($expect, $actual);

                // 
                // test User(user): -> using default domain
                // 
                $user = self::$_user;
                $domain = $this->config->user->domain;
                $this->_object = new User($user);
                $expect = sprintf("%s@%s", self::$_user, $domain);
                $actual = $this->_object->getPrincipalName();
                self::assertEquals($expect, $actual);

                // 
                // test User(user): -> without default domain (throws)
                // 
                $user = self::$_user;
                $domain = $this->config->user->domain;
                $this->config->user->domain = null;
                $this->setExpectedExceptionFromAnnotation();
                $this->_object = new User($user);
                $this->setExpectedException(null);
                $this->config->user->domain = $domain;

                // 
                // test User(null): -> empty user
                // 
                try {
                        $this->_object = new User();
                } catch (Exception $exception) {
                        self::error($exception);
                }

                // 
                // Test default domain unset in config:
                // 
                $domain = $this->config->user->domain;
                $this->config->user->domain = null;

                $user = sprintf("%s@%s", self::$_user, self::$_domain);
                try {
                        $this->_object = new User($user);
                } catch (Exception $exception) {
                        self::error($exception);
                }

                $user = self::$_user;
                $this->setExpectedExceptionFromAnnotation();
                $this->_object = new User($user);
                $this->setExpectedException(null);

                $this->config->user->domain = $domain;

                // 
                // test User(user, null, roles): -> "act-as" (impersonation).
                // 
                $roles = array(
                        0 => array(Roles::ADMIN, Roles::TEACHER),
                        1 => array(Roles::CONTRIBUTOR),
                        2 => array(Roles::DECODER, Roles::INVIGILATOR),
                        3 => array(Roles::INVIGILATOR)
                );
                $this->_object = new User(self::$_user, self::$_domain, null, $roles);
                self::assertTrue(count($this->_object->roles->getRoles(0)) == 5);
                self::assertTrue(count($this->_object->roles->getRoles(1)) == 1);
                self::assertTrue(count($this->_object->roles->getRoles(2)) == 2);
                self::assertTrue(count($this->_object->roles->getRoles(3)) == 1);
                self::assertTrue(count($this->_object->roles->getRoles(4)) == 0);
                self::assertTrue(count($this->_object->roles->getAllRoles()) == 4);
                self::assertTrue(count($this->_object->roles->getAllRoles()[1]) == 1);

                self::assertTrue($this->_object->roles->hasRole(Roles::ADMIN));
                self::assertTrue($this->_object->roles->hasRole(Roles::TEACHER));
                self::assertTrue($this->_object->roles->hasRole(Roles::CONTRIBUTOR));
                self::assertTrue($this->_object->roles->hasRole(Roles::DECODER));
                self::assertTrue($this->_object->roles->hasRole(Roles::INVIGILATOR));

                self::assertTrue($this->_object->roles->hasRole(Roles::DECODER, 2));
                self::assertTrue($this->_object->roles->hasRole(Roles::INVIGILATOR, 2));
                self::assertFalse($this->_object->roles->hasRole(Roles::DECODER, 3));
        }

        /**
         * Test the roles property.
         * @coversNothing
         * @group security
         */
        public function testRolesProperty()
        {
                $roles = $this->_object->roles;
                self::assertNotNull($roles);
                self::assertInstanceOf('\OpenExam\Library\Security\Roles', $roles);
        }

        /**
         * @covers OpenExam\Library\Security\User::getPrincipalName
         * @group security
         */
        public function testGetPrincipalName()
        {
                $principal = sprintf("%s@%s", self::$_user, self::$_domain);
                self::assertNotNull($this->_object->getPrincipalName());
                self::assertNotEmpty($this->_object->getPrincipalName());
                self::assertTrue($this->_object->getPrincipalName() == $principal);

                $this->_object = new User();
                self::assertNull($this->_object->getPrincipalName());
        }

        /**
         * @covers OpenExam\Library\Security\User::getDomain
         * @group security
         */
        public function testGetDomain()
        {
                self::assertNotNull($this->_object->getDomain());
                self::assertNotEmpty($this->_object->getDomain());
                self::assertTrue($this->_object->getDomain() == self::$_domain);

                $this->_object = new User();
                self::assertNull($this->_object->getDomain());
        }

        /**
         * @covers OpenExam\Library\Security\User::getUser
         * @group security
         */
        public function testGetUser()
        {
                self::assertNotNull($this->_object->getUser());
                self::assertNotEmpty($this->_object->getUser());
                self::assertTrue($this->_object->getUser() == self::$_user);

                $this->_object = new User();
                self::assertNull($this->_object->getUser());
        }

        /**
         * @covers OpenExam\Library\Security\User::getPrimaryRole
         * @group security
         */
        public function testGetPrimaryRole()
        {
                self::assertNotNull($this->_object->getPrimaryRole());
                self::assertNotEmpty($this->_object->getPrimaryRole());
                self::assertTrue($this->_object->getPrimaryRole() == self::$_role);

                $this->_object = new User();
                self::assertNull($this->_object->getPrimaryRole());
        }

        /**
         * @covers OpenExam\Library\Security\User::setPrimaryRole
         * @group security
         */
        public function testSetPrimaryRole()
        {
                self::assertNotNull($this->_object->getPrimaryRole());

                $this->_object->setPrimaryRole(null);
                self::assertNull($this->_object->getPrimaryRole());

                $expect = 'somerole';
                $this->_object->setPrimaryRole($expect);
                $actual = $this->_object->getPrimaryRole();
                self::assertEquals($expect, $actual);

                $expect = 'somerole';
                $this->_object->setPrimaryRole($expect);
                $actual = $this->_object->setPrimaryRole(null);
                self::assertEquals($expect, $actual);
        }

        /**
         * @covers OpenExam\Library\Security\User::hasPrimaryRole
         * @group security
         */
        public function testHasPrimaryRole()
        {
                self::assertTrue($this->_object->hasPrimaryRole());
                $this->_object->setPrimaryRole(null);
                self::assertFalse($this->_object->hasPrimaryRole());
        }

        /**
         * @covers OpenExam\Library\Security\User::__toString
         * @group security
         */
        public function testToString()
        {
                $expect = sprintf("%s@%s", self::$_user, self::$_domain);
                $actual = (string) $this->_object;
                self::assertNotNull($actual);
                self::assertEquals($expect, $actual);
        }

        /**
         * @covers OpenExam\Library\Security\User::aquire
         * @group security
         */
        public function testAquire()
        {
                $id = 2;        // faked object ID

                // 
                // Some roles to test:
                // 
                $expect = array('admin', 'corrector', 'decoder');
                
                //
                // Use "act-as" impersonation to inject roles into the user 
                // object. This saves us from having to insert all related
                // database records.
                // 
                $this->_object = new User(self::$_user, self::$_domain, null, array($id => $expect));

                // 
                // Test aquire global:
                // 
                $actual = $this->_object->aquire($expect);
                self::assertNotNull($actual);
                self::assertTrue(is_array($actual));
                self::assertEquals($expect, $actual);

                // 
                // Test aquire object specific:
                // 
                $actual = $this->_object->aquire($expect, $id);
                self::assertNotNull($actual);
                self::assertTrue(is_array($actual));
                self::assertEquals($expect, $actual);
        }

}
