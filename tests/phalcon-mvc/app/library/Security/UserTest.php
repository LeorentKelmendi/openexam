<?php

namespace OpenExam\Library\Security;

use OpenExam\Tests\Phalcon\TestCase;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-09-02 at 11:26:01.
 */
class UserTest extends TestCase
{

        /**
         * @var User
         */
        protected $object;
        private static $user = 'user1';
        private static $domain = 'domain1';

        /**
         * Sets up the fixture, for example, opens a network connection.
         * This method is called before a test is executed.
         */
        protected function setUp()
        {
                $this->object = new User(self::$user, self::$domain);
        }

        /**
         * Tears down the fixture, for example, closes a network connection.
         * This method is called after a test is executed.
         */
        protected function tearDown()
        {
                
        }

        /**
         * @covers OpenExam\Library\Security\User::__construct
         */
        public function testConstructor()
        {
                // 
                // test User(user, domain):
                // 
                $user = self::$user;
                $domain = self::$domain;
                $this->object = new User($user, $domain);
                $expect = sprintf("%s@%s", $user, $domain);
                $actual = $this->object->getPrincipalName();
                self::assertEquals($expect, $actual);

                // 
                // test User(principal):
                // 
                $user = sprintf("%s@%s", self::$user, self::$domain);
                $this->object = new User($user);
                $expect = $user;
                $actual = $this->object->getPrincipalName();
                self::assertEquals($expect, $actual);

                // 
                // test User(user): -> using default domain
                // 
                $user = self::$user;
                $domain = $this->config['user']['domain'];
                $this->object = new User($user);
                $expect = sprintf("%s@%s", self::$user, $domain);
                $actual = $this->object->getPrincipalName();
                self::assertEquals($expect, $actual);

                // 
                // test User(user): -> without default domain (throws)
                // 
                $user = self::$user;
                try {
                        $this->object = new User($user);
                        self::fail();
                } catch (\Exception $exception) {
                        
                }

                // 
                // test User(null): -> empty user
                // 
                $user = self::$user;
                try {
                        $this->object = new User();
                } catch (\Exception $exception) {
                        self::fail();
                }
        }

        /**
         * @covers OpenExam\Library\Security\User::__get
         */
        public function testMagicGet()
        {
                $roles = $this->object->roles;
                self::assertNotNull($roles);
                self::assertInstanceOf('\OpenExam\Library\Security\Roles', $roles);
        }

        /**
         * @covers OpenExam\Library\Security\User::getPrincipalName
         */
        public function testGetPrincipalName()
        {
                $principal = sprintf("%s@%s", self::$user, self::$domain);
                self::assertNotNull($this->object->getPrincipalName());
                self::assertNotEmpty($this->object->getPrincipalName());
                self::assertTrue($this->object->getPrincipalName() == $principal);

                $this->object = new User();
                self::assertNull($this->object->getPrincipalName());
        }

        /**
         * @covers OpenExam\Library\Security\User::getDomain
         */
        public function testGetDomain()
        {
                self::assertNotNull($this->object->getDomain());
                self::assertNotEmpty($this->object->getDomain());
                self::assertTrue($this->object->getDomain() == self::$domain);

                $this->object = new User();
                self::assertNull($this->object->getDomain());
        }

        /**
         * @covers OpenExam\Library\Security\User::getUser
         */
        public function testGetUser()
        {
                self::assertNotNull($this->object->getUser());
                self::assertNotEmpty($this->object->getUser());
                self::assertTrue($this->object->getUser() == self::$user);

                $this->object = new User();
                self::assertNull($this->object->getUser());
        }

}
