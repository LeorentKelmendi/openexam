<?php

/*
 * Copyright (C) 2016-2018 The OpenExam Project
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */

namespace OpenExam\Library\Model\Audit\Config;

use OpenExam\Library\Model\Audit\Audit;
use OpenExam\Tests\Phalcon\TestCase;
use Phalcon\Config as PhalconConfig;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-04-21 at 00:01:49.
 * @author Anders LÃ¶vgren (Computing Department at BMC, Uppsala University)
 */
class ServiceConfigTest extends TestCase
{

        /**
         * All test cases.
         * @var PhalconConfig 
         */
        private static $_audit;

        protected function setUp()
        {
                self::$_audit = new PhalconConfig(array(
                        'c1'  => false,
                        'c2'  => true,
                        'c3'  => array(
                                '*' => false
                        ),
                        'c4'  => array(
                                '*' => true
                        ),
                        'c5'  => array(
                                'model1' => false
                        ),
                        'c6'  => array(
                                'model1' => true
                        ),
                        'c7'  => array(
                                '*'      => true,
                                'model1' => false
                        ),
                        'c8'  => array(
                                '*'      => false,
                                'model1' => true
                        ),
                        'c9'  => array(
                                'model1' => array(
                                        'file' => true
                                )
                        ),
                        'c10' => array(
                                'model1' => array(
                                        'file' => array(
                                                'name' => 'file1'
                                        )
                                )
                        ),
                        'c11' => array(
                                'model1' => array(
                                        'file' => array(
                                                'format' => 'json'
                                        )
                                )
                        ),
                        'c12' => array(
                                'model1' => array(
                                        'actions' => array('update')
                                )
                        ),
                        'c13' => array(
                                'model1' => array(
                                        'actions' => array('delete'),
                                        'file'    => array(
                                                'name'   => 'file1',
                                                'format' => 'export'
                                        )
                                ),
                                'model2' => false,
                                'model3' => true
                        )
                ));
        }

        /**
         * @covers OpenExam\Library\Model\Audit\ServiceConfig::getDefault
         * @group model
         */
        public function testGetDefault()
        {
                $actual = ServiceConfig::getDefault('model1');
                $expect = array(
                        'actions' => Audit::getDefaultActions(),
                        'data'    => array(
                                'connection' => 'dbaudit',
                                'table'      => 'model1'
                        )
                );
                self::assertNotNull($actual);
                self::assertEquals($expect, $actual);
        }

        /**
         * @covers OpenExam\Library\Model\Audit\ServiceConfig::hasAudit
         * @group model
         */
        public function testHasAudit()
        {
                // 
                // Check audit disabled case (for all):
                // 
                $config = new ServiceConfig(self::$_audit['c1']);
                $expect = false;
                $actual = $config->hasAudit('model1');
                self::assertNotNull($actual);
                self::assertTrue(is_bool($actual));
                self::assertFalse($actual);
                self::assertEquals($expect, $actual);

                // 
                // Check audit enabled case (for all):
                // 
                $config = new ServiceConfig(self::$_audit['c2']);
                $expect = true;
                $actual = $config->hasAudit('model1');
                self::assertNotNull($actual);
                self::assertTrue(is_bool($actual));
                self::assertTrue($actual);
                self::assertEquals($expect, $actual);

                // 
                // Check audit disabled case (by wildcard):
                // 
                $config = new ServiceConfig(self::$_audit['c3']);
                $expect = false;
                $actual = $config->hasAudit('model1');
                self::assertNotNull($actual);
                self::assertTrue(is_bool($actual));
                self::assertFalse($actual);
                self::assertEquals($expect, $actual);

                // 
                // Check audit enabled case (by wildcard):
                // 
                $config = new ServiceConfig(self::$_audit['c4']);
                $expect = true;
                $actual = $config->hasAudit('model1');
                self::assertNotNull($actual);
                self::assertTrue(is_bool($actual));
                self::assertTrue($actual);
                self::assertEquals($expect, $actual);

                // 
                // Check audit disabled case (for model1):
                // 
                $config = new ServiceConfig(self::$_audit['c5']);
                $expect = false;
                $actual = $config->hasAudit('model1');
                self::assertNotNull($actual);
                self::assertTrue(is_bool($actual));
                self::assertFalse($actual);
                self::assertEquals($expect, $actual);

                // 
                // Check audit enabled case (for model1):
                // 
                $config = new ServiceConfig(self::$_audit['c6']);
                $expect = true;
                $actual = $config->hasAudit('model1');
                self::assertNotNull($actual);
                self::assertTrue(is_bool($actual));
                self::assertTrue($actual);
                self::assertEquals($expect, $actual);
                $expect = false;
                $actual = $config->hasAudit('model2');
                self::assertNotNull($actual);
                self::assertTrue(is_bool($actual));
                self::assertFalse($actual);
                self::assertEquals($expect, $actual);

                // 
                // Check '*' => true, 'model1' => false:
                // 
                $config = new ServiceConfig(self::$_audit['c7']);
                $expect = false;
                $actual = $config->hasAudit('model1');
                self::assertNotNull($actual);
                self::assertTrue(is_bool($actual));
                self::assertFalse($actual);
                self::assertEquals($expect, $actual);
                $expect = true;
                $actual = $config->hasAudit('model2');
                self::assertNotNull($actual);
                self::assertTrue(is_bool($actual));
                self::assertTrue($actual);
                self::assertEquals($expect, $actual);

                // 
                // Check '*' => false, 'model1' => true:
                // 
                $config = new ServiceConfig(self::$_audit['c8']);
                $expect = true;
                $actual = $config->hasAudit('model1');
                self::assertNotNull($actual);
                self::assertTrue(is_bool($actual));
                self::assertTrue($actual);
                self::assertEquals($expect, $actual);
                $expect = false;
                $actual = $config->hasAudit('model2');
                self::assertNotNull($actual);
                self::assertTrue(is_bool($actual));
                self::assertFalse($actual);
                self::assertEquals($expect, $actual);

                // 
                // Check 'model1' => array(...):
                // 
                $config = new ServiceConfig(self::$_audit['c9']);
                $expect = true;
                $actual = $config->hasAudit('model1');
                self::assertNotNull($actual);
                self::assertTrue(is_bool($actual));
                self::assertTrue($actual);
                self::assertEquals($expect, $actual);
                $expect = false;
                $actual = $config->hasAudit('model2');
                self::assertNotNull($actual);
                self::assertTrue(is_bool($actual));
                self::assertFalse($actual);
                self::assertEquals($expect, $actual);

                // 
                // The rest is the same as c9...
                // 
        }

        /**
         * @covers OpenExam\Library\Model\Audit\ServiceConfig::getConfig
         * @group model
         */
        public function testGetConfig()
        {
                // 
                // Check audit disabled case (for all):
                // 
                $config = new ServiceConfig(self::$_audit['c1']);
                $expect = false;
                $actual = $config->getConfig('model1');
                self::assertNotNull($actual);
                self::assertTrue(is_bool($actual));
                self::assertFalse($actual);
                self::assertEquals($expect, $actual);

                // 
                // Check audit enabled case (for all):
                // 
                $config = new ServiceConfig(self::$_audit['c2']);
                $expect = ServiceConfig::getDefault('model1');
                $actual = $config->getConfig('model1');
                self::assertNotNull($actual);
                self::assertTrue(is_array($actual));
                self::assertEquals($expect, $actual);

                // 
                // Check audit disabled case (by wildcard):
                // 
                $config = new ServiceConfig(self::$_audit['c3']);
                $expect = false;
                $actual = $config->getConfig('model1');
                self::assertNotNull($actual);
                self::assertTrue(is_bool($actual));
                self::assertFalse($actual);
                self::assertEquals($expect, $actual);

                // 
                // Check audit enabled case (by wildcard):
                // 
                $config = new ServiceConfig(self::$_audit['c4']);
                $expect = ServiceConfig::getDefault('model1');
                $actual = $config->getConfig('model1');
                self::assertNotNull($actual);
                self::assertTrue(is_array($actual));
                self::assertEquals($expect, $actual);

                // 
                // Check audit disabled case (for model1):
                // 
                $config = new ServiceConfig(self::$_audit['c5']);
                $expect = false;
                $actual = $config->getConfig('model1');
                self::assertNotNull($actual);
                self::assertTrue(is_bool($actual));
                self::assertFalse($actual);
                self::assertEquals($expect, $actual);

                // 
                // Check audit enabled case (for model1):
                // 
                $config = new ServiceConfig(self::$_audit['c6']);
                $expect = ServiceConfig::getDefault('model1');
                $actual = $config->getConfig('model1');
                self::assertNotNull($actual);
                self::assertTrue(is_array($actual));
                self::assertEquals($expect, $actual);
                $expect = false;
                $actual = $config->getConfig('model2');
                self::assertNotNull($actual);
                self::assertTrue(is_bool($actual));
                self::assertFalse($actual);
                self::assertEquals($expect, $actual);

                // 
                // Check '*' => true, 'model1' => false:
                // 
                $config = new ServiceConfig(self::$_audit['c7']);
                $expect = false;
                $actual = $config->getConfig('model1');
                self::assertNotNull($actual);
                self::assertTrue(is_bool($actual));
                self::assertFalse($actual);
                self::assertEquals($expect, $actual);
                $expect = ServiceConfig::getDefault('model2');
                $actual = $config->getConfig('model2');
                self::assertNotNull($actual);
                self::assertTrue(is_array($actual));
                self::assertEquals($expect, $actual);

                // 
                // Check '*' => false, 'model1' => true:
                // 
                $config = new ServiceConfig(self::$_audit['c8']);
                $expect = ServiceConfig::getDefault('model1');
                $actual = $config->getConfig('model1');
                self::assertNotNull($actual);
                self::assertTrue(is_array($actual));
                self::assertEquals($expect, $actual);
                $expect = false;
                $actual = $config->getConfig('model2');
                self::assertNotNull($actual);
                self::assertTrue(is_bool($actual));
                self::assertFalse($actual);
                self::assertEquals($expect, $actual);

                // 
                // Check 'model1' => array(...):
                // 
                $config = new ServiceConfig(self::$_audit['c9']);
                $expect = self::$_audit->c9->model1->toArray();
                $actual = $config->getConfig('model1');
                self::assertNotNull($actual);
                self::assertTrue(is_array($actual));
                self::assertEquals($expect, $actual);
                $expect = false;
                $actual = $config->getConfig('model2');
                self::assertNotNull($actual);
                self::assertTrue(is_bool($actual));
                self::assertFalse($actual);
                self::assertEquals($expect, $actual);

                // 
                // Check 'model1' => array(...):
                // 
                $config = new ServiceConfig(self::$_audit['c10']);
                $expect = self::$_audit->c10->model1->toArray();
                $actual = $config->getConfig('model1');
                self::assertNotNull($actual);
                self::assertTrue(is_array($actual));
                self::assertEquals($expect, $actual);
                $expect = false;
                $actual = $config->getConfig('model2');
                self::assertNotNull($actual);
                self::assertTrue(is_bool($actual));
                self::assertFalse($actual);
                self::assertEquals($expect, $actual);

                // 
                // Check 'model1' => array(...):
                // 
                $config = new ServiceConfig(self::$_audit['c11']);
                $expect = self::$_audit->c11->model1->toArray();
                $actual = $config->getConfig('model1');
                self::assertNotNull($actual);
                self::assertTrue(is_array($actual));
                self::assertEquals($expect, $actual);
                $expect = false;
                $actual = $config->getConfig('model2');
                self::assertNotNull($actual);
                self::assertTrue(is_bool($actual));
                self::assertFalse($actual);
                self::assertEquals($expect, $actual);

                // 
                // Check 'model1' => array(...):
                // 
                $config = new ServiceConfig(self::$_audit['c12']);
                $expect = self::$_audit->c12->model1->toArray();
                $actual = $config->getConfig('model1');
                self::assertNotNull($actual);
                self::assertTrue(is_array($actual));
                self::assertEquals($expect, $actual);
                $expect = false;
                $actual = $config->getConfig('model2');
                self::assertNotNull($actual);
                self::assertTrue(is_bool($actual));
                self::assertFalse($actual);
                self::assertEquals($expect, $actual);

                // 
                // Check 'model1' => array(...), 'model2' => false, 'model3' => true
                // 
                $config = new ServiceConfig(self::$_audit['c13']);
                $expect = self::$_audit->c13->model1->toArray();
                $actual = $config->getConfig('model1');
                self::assertNotNull($actual);
                self::assertTrue(is_array($actual));
                self::assertEquals($expect, $actual);
                $expect = false;
                $actual = $config->getConfig('model2');
                self::assertNotNull($actual);
                self::assertTrue(is_bool($actual));
                self::assertFalse($actual);
                self::assertEquals($expect, $actual);
                $expect = ServiceConfig::getDefault('model3');
                $actual = $config->getConfig('model3');
                self::assertNotNull($actual);
                self::assertTrue(is_array($actual));
                self::assertEquals($expect, $actual);
        }

        /**
         * @covers OpenExam\Library\Model\Audit\ServiceConfig::hasTarget
         * @group model
         */
        public function testHasTarget()
        {
                $config = new ServiceConfig(self::$_audit['c13']);

                $expect = true;
                $actual = $config->hasTarget('model1', Audit::TARGET_FILE);
                self::assertEquals($expect, $actual);
                $expect = false;
                $actual = $config->hasTarget('model1', Audit::TARGET_DATA);
                self::assertEquals($expect, $actual);

                $expect = false;
                $actual = $config->hasTarget('model2', Audit::TARGET_FILE);
                self::assertEquals($expect, $actual);
                $expect = false;
                $actual = $config->hasTarget('model2', Audit::TARGET_DATA);
                self::assertEquals($expect, $actual);

                $expect = false;
                $actual = $config->hasTarget('model3', Audit::TARGET_FILE);
                self::assertEquals($expect, $actual);
                $expect = true;
                $actual = $config->hasTarget('model3', Audit::TARGET_DATA);
                self::assertEquals($expect, $actual);

                $expect = false;
                $actual = $config->hasTarget('model4', Audit::TARGET_FILE);
                self::assertEquals($expect, $actual);
                $expect = false;
                $actual = $config->hasTarget('model4', Audit::TARGET_DATA);
                self::assertEquals($expect, $actual);
        }

        /**
         * @covers OpenExam\Library\Model\Audit\ServiceConfig::getTarget
         * @group model
         */
        public function testGetTarget()
        {
                $config = new ServiceConfig(self::$_audit['c13']);

                $expect = self::$_audit->c13->model1->file->toArray();
                $actual = $config->getTarget('model1', Audit::TARGET_FILE);
                self::assertEquals($expect, $actual);
                $expect = false;
                $actual = $config->getTarget('model1', Audit::TARGET_DATA);
                self::assertEquals($expect, $actual);

                $expect = false;
                $actual = $config->getTarget('model2', Audit::TARGET_FILE);
                self::assertEquals($expect, $actual);
                $expect = false;
                $actual = $config->getTarget('model2', Audit::TARGET_DATA);
                self::assertEquals($expect, $actual);

                $expect = false;
                $actual = $config->getTarget('model3', Audit::TARGET_FILE);
                self::assertEquals($expect, $actual);
                $expect = ServiceConfig::getDefault('model3')['data'];
                $actual = $config->getTarget('model3', Audit::TARGET_DATA);
                self::assertEquals($expect, $actual);

                $expect = false;
                $actual = $config->getTarget('model4', Audit::TARGET_FILE);
                self::assertEquals($expect, $actual);
                $expect = false;
                $actual = $config->getTarget('model5', Audit::TARGET_DATA);
                self::assertEquals($expect, $actual);
        }

}
