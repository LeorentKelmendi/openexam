<?php

/*
 * Copyright (C) 2016-2018 The OpenExam Project
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */

namespace OpenExam\Library\Model\Audit;

use OpenExam\Models\Exam;
use OpenExam\Models\Student;
use OpenExam\Tests\Phalcon\TestCase;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-04-28 at 02:07:54.
 */
class HistoryTest extends TestCase
{

        /**
         * @var History
         */
        private $_object;

        /**
         * Sets up the fixture, for example, opens a network connection.
         * This method is called before a test is executed.
         */
        protected function setUp()
        {
                $exam = new Exam();
                $exam->assign(array(
                        'name'    => 'N',
                        'orgunit' => 'O',
                        'grades'  => 'G'
                ));
                $exam->create();

                $stud = new Student();
                $stud->exam_id = $exam->id;
                $stud->user = "user1@example.com";
                $stud->create();

                // 
                // Must use find() or snapshot data is unset.
                // 
                $stud = Student::findFirst($stud->id);
                $stud->user = "user2@example.com";
                $stud->update();

                $stud = Student::findFirst($stud->id);
                $stud->user = "user3@example.com";
                $stud->update();

                $stud = Student::findFirst($stud->id);
                $stud->user = "user4@example.com";
                $stud->update();

                $this->_object = new History($stud);
        }

        /**
         * Tears down the fixture, for example, closes a network connection.
         * This method is called after a test is executed.
         */
        protected function tearDown()
        {
                $model = $this->_object->getModel();
                $model->exam->delete();
                $model->delete();
        }

        /**
         * @covers OpenExam\Library\Model\Audit\History::getModel
         * @group model
         */
        public function testGetModel()
        {
                self::assertNotNull($this->_object->getModel());
        }

        /**
         * @covers OpenExam\Library\Model\Audit\History::getPosition
         * @group model
         */
        public function testGetPosition()
        {
                if ($this->_object->hasRevisions() == false) {
                        self::markTestSkipped('Audit is not enabled');
                }

                $expect = 2;
                $actual = $this->_object->getPosition();
                self::assertEquals($expect, $actual);
        }

        /**
         * @covers OpenExam\Library\Model\Audit\History::getIndex
         * @group model
         */
        public function testGetIndex()
        {
                if ($this->_object->hasRevisions() == false) {
                        self::markTestSkipped('Audit is not enabled');
                }

                $actual = $this->_object->getIndex();
                self::assertTrue(is_int($actual));
                self::assertTrue($actual != 0);
        }

        /**
         * @covers OpenExam\Library\Model\Audit\History::getSize
         * @group model
         */
        public function testGetSize()
        {
                if ($this->_object->hasRevisions() == false) {
                        self::markTestSkipped('Audit is not enabled');
                }

                $expect = 3;
                $actual = $this->_object->getSize();
                self::assertEquals($expect, $actual);
        }

        /**
         * @covers OpenExam\Library\Model\Audit\History::getRevision
         * @group model
         */
        public function testGetRevision()
        {
                if ($this->_object->hasRevisions() == false) {
                        self::markTestSkipped('Audit is not enabled');
                }

                $actual = $this->_object->getRevision();
                self::assertNotNull($actual);
                self::assertTrue(is_array($actual));
        }

        /**
         * @covers OpenExam\Library\Model\Audit\History::getChanges
         * @group model
         */
        public function testGetChanges()
        {
                if ($this->_object->hasRevisions() == false) {
                        self::markTestSkipped('Audit is not enabled');
                }

                $actual = $this->_object->getChanges();
                self::assertNotNull($actual);
                self::assertTrue(is_array($actual));
        }

        /**
         * @covers OpenExam\Library\Model\Audit\History::hasRevision
         * @group model
         */
        public function testHasRevision()
        {
                if ($this->_object->hasRevisions() == false) {
                        self::markTestSkipped('Audit is not enabled');
                }

                $revisions = $this->_object->getRevisions();

                foreach ($revisions as $expect => $revision) {
                        $actual = $this->_object->hasRevision($revision['id']);
                        self::assertEquals($expect, $actual);
                }

                $expect = -1;
                $actual = $this->_object->hasRevision('missing');
                self::assertEquals($expect, $actual);
        }

        /**
         * @covers OpenExam\Library\Model\Audit\History::hasRevisions
         * @group model
         */
        public function testHasRevisions()
        {
                if ($this->_object->hasRevisions() == false) {
                        self::markTestSkipped('Audit is not enabled');
                }

                $expect = true;
                $actual = $this->_object->hasRevisions();
                self::assertEquals($expect, $actual);
        }

        /**
         * @covers OpenExam\Library\Model\Audit\History::getRevisions
         * @group model
         */
        public function testGetRevisions()
        {
                if ($this->_object->hasRevisions() == false) {
                        self::markTestSkipped('Audit is not enabled');
                }

                $actual = $this->_object->getRevisions();
                self::assertNotNull($actual);
                self::assertTrue(is_array($actual));
                self::assertTrue(count($actual) == 3);
        }

        /**
         * @covers OpenExam\Library\Model\Audit\History::undo
         * @group model
         */
        public function testUndo()
        {
                if ($this->_object->hasRevisions() == false) {
                        self::markTestSkipped('Audit is not enabled');
                }

                $expect = "user4@example.com";
                $actual = $this->_object->getModel()->user;
                self::assertEquals($expect, $actual);

                $this->_object->undo();
                $expect = "user3@example.com";
                $actual = $this->_object->getModel()->user;
                self::assertEquals($expect, $actual);

                $this->_object->undo();
                $expect = "user2@example.com";
                $actual = $this->_object->getModel()->user;
                self::assertEquals($expect, $actual);

                $this->_object->undo();
                $expect = "user1@example.com";
                $actual = $this->_object->getModel()->user;
                self::assertEquals($expect, $actual);

                $this->_object->undo();
                $expect = "user1@example.com";
                $actual = $this->_object->getModel()->user;
                self::assertEquals($expect, $actual);
        }

        /**
         * @covers OpenExam\Library\Model\Audit\History::redo
         * @group model
         */
        public function testRedo()
        {
                if ($this->_object->hasRevisions() == false) {
                        self::markTestSkipped('Audit is not enabled');
                }

                $expect = "user4@example.com";
                $actual = $this->_object->getModel()->user;
                self::assertEquals($expect, $actual);

                $this->_object->undo();
                $expect = "user3@example.com";
                $actual = $this->_object->getModel()->user;
                self::assertEquals($expect, $actual);

                $this->_object->redo();
                $expect = "user4@example.com";
                $actual = $this->_object->getModel()->user;
                self::assertEquals($expect, $actual);

                $this->_object->redo();
                $expect = "user4@example.com";
                $actual = $this->_object->getModel()->user;
                self::assertEquals($expect, $actual);
        }

        /**
         * @covers OpenExam\Library\Model\Audit\History::revert
         * @group model
         */
        public function testRevert()
        {
                if ($this->_object->hasRevisions() == false) {
                        self::markTestSkipped('Audit is not enabled');
                }

                $revisions = $this->_object->getRevisions();

                // 
                // Revert to current should have no effect:
                // 
                $rev_id = $this->_object->getRevision()['id'];
                $expect = $this->_object->getModel()->user;
                $this->_object->revert($rev_id);
                $actual = $this->_object->getModel()->user;
                self::assertEquals($expect, $actual);

                // 
                // Revert to second revision in history:
                // 
                $rev_id = $revisions[1]['id'];
                $this->_object->revert($rev_id);
                $expect = "user3@example.com";
                $actual = $this->_object->getModel()->user;
                self::assertEquals($expect, $actual);

                $this->_object->revert($rev_id);
                $expect = "user3@example.com";
                $actual = $this->_object->getModel()->user;
                self::assertEquals($expect, $actual);

                // 
                // Revert to first revision in history:
                // 
                $rev_id = $revisions[0]['id'];
                $this->_object->revert($rev_id);
                $expect = "user2@example.com";
                $actual = $this->_object->getModel()->user;
                self::assertEquals($expect, $actual);

                // 
                // Use previous state instead of last:
                // 
                $rev_id = $revisions[0]['id'];
                $this->_object->revert($rev_id, true);
                $expect = "user1@example.com";
                $actual = $this->_object->getModel()->user;
                self::assertEquals($expect, $actual);
        }

        /**
         * @covers OpenExam\Library\Model\Audit\History::refresh
         * @group model
         */
        public function testRefresh()
        {
                if ($this->_object->hasRevisions() == false) {
                        self::markTestSkipped('Audit is not enabled');
                }

                $expect = 3;
                $actual = $this->_object->getSize();
                self::assertEquals($expect, $actual);

                $model = $this->_object->getModel();
                $model->user = "user5@example.com";
                $model->update();

                $this->_object->refresh();

                $expect = 4;
                $actual = $this->_object->getSize();
                self::assertEquals($expect, $actual);
        }

}
