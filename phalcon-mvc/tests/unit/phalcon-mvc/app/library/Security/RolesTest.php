<?php

namespace OpenExam\Library\Security;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-08-31 at 16:13:35.
 */
class RolesTest extends \PHPUnit_Framework_TestCase
{

        /**
         * @var Roles
         */
        protected $object;

        /**
         * Sets up the fixture, for example, opens a network connection.
         * This method is called before a test is executed.
         */
        protected function setUp()
        {
                $this->object = new Roles;
        }

        /**
         * Tears down the fixture, for example, closes a network connection.
         * This method is called after a test is executed.
         */
        protected function tearDown()
        {
                
        }

        /**
         * @covers OpenExam\Library\Security\Roles::addRole
         */
        public function testAddRole()
        {
                $role = 'role';
                
                self::assertFalse($this->object->hasRole($role));
                self::assertFalse($this->object->hasRole($role, 0));
                self::assertFalse($this->object->hasRole($role, 1));
                
                $this->object->addRole($role);
                self::assertTrue($this->object->hasRole($role));
                self::assertTrue($this->object->hasRole($role, 0));
                self::assertFalse($this->object->hasRole($role, 1));
                
                $this->object = new Roles;
                self::assertFalse($this->object->hasRole($role));
                $this->object->addRole($role, 1);
                self::assertTrue($this->object->hasRole($role));
                self::assertTrue($this->object->hasRole($role, 0));
                self::assertTrue($this->object->hasRole($role, 1));
                self::assertFalse($this->object->hasRole($role, 2));
        }

        /**
         * @covers OpenExam\Library\Security\Roles::removeRole
         */
        public function testRemoveRole()
        {
                $role = 'role';

                $this->object->removeRole($role);
                self::assertFalse($this->object->hasRole($role));
                
                $this->object->addRole($role);
                self::assertTrue($this->object->hasRole($role));
                $this->object->removeRole($role);
                self::assertFalse($this->object->hasRole($role));
                
                $this->object = new Roles;
                self::assertFalse($this->object->hasRole($role, 1));
                $this->object->addRole($role, 1);
                self::assertTrue($this->object->hasRole($role, 1));
                $this->object->removeRole($role, 1);
                self::assertFalse($this->object->hasRole($role, 1));
                self::assertTrue($this->object->hasRole($role));
        }

        /**
         * @covers OpenExam\Library\Security\Roles::hasRole
         */
        public function testHasRole()
        {
                $role1 = 'role1';
                $role2 = 'role2';

                self::assertFalse($this->object->hasRole($role1));
                $this->object->addRole($role1);
                self::assertTrue($this->object->hasRole($role1));
                self::assertFalse($this->object->hasRole($role2));
                
                $this->object->addRole($role2);
                self::assertTrue($this->object->hasRole($role2));
                
                self::assertFalse($this->object->hasRole($role1, 1));
                $this->object->addRole($role1, 1);
                self::assertTrue($this->object->hasRole($role1, 1));
                self::assertFalse($this->object->hasRole($role2, 1));
                
                $this->object->addRole($role2, 2);
                self::assertTrue($this->object->hasRole($role2, 2));
                
                self::assertFalse($this->object->hasRole($role1, 2));
                self::assertFalse($this->object->hasRole($role2, 1));
        }

        /**
         * @covers OpenExam\Library\Security\Roles::getRoles
         */
        public function testGetRoles()
        {
                $role = 'role';
                
                self::assertTrue(is_array($this->object->getRoles()));
                self::assertTrue(is_array($this->object->getRoles(1)));
                
                self::assertTrue(count($this->object->getRoles()) == 0);
                self::assertTrue(count($this->object->getRoles(1)) == 0);
                
                $this->object->addRole($role);
                
                self::assertTrue(is_array($this->object->getRoles()));
                self::assertTrue(is_array($this->object->getRoles(1)));
                
                self::assertTrue(count($this->object->getRoles()) == 1);
                self::assertTrue(count($this->object->getRoles(1)) == 0);
                
                $this->object->addRole($role, 1);
                
                self::assertTrue(is_array($this->object->getRoles()));
                self::assertTrue(is_array($this->object->getRoles(1)));
                
                self::assertTrue(count($this->object->getRoles()) == 1);
                self::assertTrue(count($this->object->getRoles(1)) == 1);
        }

        /**
         * @covers OpenExam\Library\Security\Roles::getAllRoles
         */
        public function testGetAllRoles()
        {
                self::assertTrue(is_array($this->object->getAllRoles()));
                self::assertTrue(count($this->object->getAllRoles()) == 0);

                $this->object->addRole(Roles::admin);
                $this->object->addRole(Roles::teacher);

                self::assertTrue(is_array($this->object->getAllRoles()));
                self::assertTrue(count($this->object->getAllRoles()) == 1);
                self::assertTrue(count($this->object->getAllRoles()[0]) == 2);
                
                $this->object = new Roles;
                
                $this->object->addRole(Roles::contributor, 1);
                $this->object->addRole(Roles::decoder, 1);
                $this->object->addRole(Roles::invigilator, 2);
                
                self::assertTrue(is_array($this->object->getAllRoles()));
                self::assertTrue(count($this->object->getAllRoles()) == 3);
                self::assertTrue(count($this->object->getAllRoles()[0]) == 3);
                self::assertTrue(count($this->object->getAllRoles()[1]) == 2);
                self::assertTrue(count($this->object->getAllRoles()[2]) == 1);
        }

        /**
         * @covers OpenExam\Library\Security\Roles::aquire
         * @todo   Implement testAquire().
         */
        public function testAquire()
        {
                // Remove the following lines when you implement this test.
                $this->markTestIncomplete(
                    'This test has not been implemented yet.'
                );
        }

        /**
         * @covers OpenExam\Library\Security\Roles::isAdmin
         * @todo   Implement testIsAdmin().
         */
        public function testIsAdmin()
        {
                self::assertTrue(Roles::isAdmin(Roles::admin));
                self::assertFalse(Roles::isAdmin('service'));
        }

        /**
         * @covers OpenExam\Library\Security\Roles::isStudent
         * @todo   Implement testIsStudent().
         */
        public function testIsStudent()
        {
                self::assertTrue(Roles::isStudent(Roles::student));
                self::assertFalse(Roles::isStudent('service'));
        }

        /**
         * @covers OpenExam\Library\Security\Roles::isStaff
         * @todo   Implement testIsStaff().
         */
        public function testIsStaff()
        {
                self::assertTrue(Roles::isStaff(Roles::contributor));
                self::assertTrue(Roles::isStaff(Roles::corrector));
                self::assertTrue(Roles::isStaff(Roles::creator));
                self::assertTrue(Roles::isStaff(Roles::decoder));
                self::assertTrue(Roles::isStaff(Roles::invigilator));
                self::assertTrue(Roles::isStaff(Roles::teacher));

                self::assertFalse(Roles::isStaff(Roles::admin));
                self::assertFalse(Roles::isStaff(Roles::student));
                self::assertFalse(Roles::isStaff('service'));
        }

        /**
         * @covers OpenExam\Library\Security\Roles::isCustom
         * @todo   Implement testIsCustom().
         */
        public function testIsCustom()
        {
                self::assertTrue(Roles::isCustom('service'));
                self::assertFalse(Roles::isCustom(Roles::admin));
        }

}
