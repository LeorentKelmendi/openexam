<?php

// 
// The source code is copyrighted, with equal shared rights, between the
// authors (see the file AUTHORS) and the OpenExam project, Uppsala University 
// unless otherwise explicit stated elsewhere.
// 
// File:    auth.def
// Created: 2014-08-25 15:09:23
// 
// Author:  Anders LÃ¶vgren (Computing Department at BMC, Uppsala University)
// 

use OpenExam\Library\Security\Login\ActiveDirectoryLogin;
use OpenExam\Library\Security\Login\ActiveDirectorySession;
use OpenExam\Library\Security\Login\CasLogin;
use UUP\Authentication\Authenticator\Authenticator;
use UUP\Authentication\Restrictor\AddressRestrictor;

// 
// The chain of authenticator plugins for various services. 
// 
// The allowed authentication methods can be configured for each service or 
// for all using the authentication '*' group.
// 
// It's also possible to add login restrictions. E.g. date/time restriction 
// can be added by inserting an plugin based on DateTimeRestrictor.
// 
return array(
        // 
        // Web/AJAX service authentication:
        // 
        'web'  => array(
                // 
                // Enable CAS login, but only for web:
                // 
                'cas'  => array(
                        'method' => function() {
                                return new CasLogin(
                                        $config, 'cas.example.com', 443, '/cas'
                                        );
                        },
                        'desc' => 'CAS Login',
                        'visible' => true
                )
        ),
        // 
        // REST service authentication:
        // 
        'rest' => array(),
        // 
        // SOAP service authentication:
        // 
        'soap' => array(
                // 
                // Example on connection restrictions. In this case, we want
                // to limit SOAP access to subnet 192.168.34.0/24.
                // 
                'from' => array(
                        'method' => function() {
                                $restriction = new AddressRestrictor('192.168.34.0/24');
                                $restriction->control(Authenticator::required);
                                $restriction->visible(false);
                                return $restriction;
                        },
                        'desc' => null
                )                
        ),
        // 
        // Common authentication plugins or restrictions:
        // 
        '*' => array(
                // 
                // Enable MSAD login globally (web, rest and soap). The options
                // array is required when serving multiple forests:
                // 
                'msad1' => array(
                        'method' => function() use($config) {
                                return new ActiveDirectoryLogin(
                                        $config, 'dc.example1.com', 636, array('form' => array('name' => 'msad1'))
                                        );
                        },
                        'desc' => 'Active Directory (AD1)',
                        'visible' => true
                ),
                // 
                // Equivalent to the ordinary active directory login, but 
                // session aware. Use this if in doubt.
                // 
                'msad2' => array(
                        'method' => function() use($config) {
                                return new ActiveDirectorySession(
                                        $config, 'dc.example2.com', 636, array('form' => array('name' => 'msad2'))
                                        );
                        },
                        'desc' => 'Active Directory (AD2)',
                        'visible' => true
                ),
                // 
                // System login for the render service. This authenticator 
                // is required by the rendering service.
                // 
                'render' => array(
                        'method' => function() use($config) {
                                return new SystemLogin(
                                        $config->render->token
                                    );
                        },
                        'desc' => 'Render Service',
                        'visible' => false
                )                            
        )
);
