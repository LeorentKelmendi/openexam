<?php

namespace OpenExam\Library\WebService\Soap\Service;

use OpenExam\Library\Core\Handler\CoreHandler;
use OpenExam\Library\Security\Exception as SecurityException;
use OpenExam\Library\Security\User;
use OpenExam\Library\WebService\Soap\SoapHandler;
use OpenExam\Library\WebService\Soap\Types\Handle;
use OpenExam\Models\Admin;
use OpenExam\Models\Answer;
use OpenExam\Models\Computer;
use OpenExam\Models\Contributor;
use OpenExam\Models\Corrector;
use OpenExam\Models\Decoder;
use OpenExam\Models\Exam;
use OpenExam\Models\File;
use OpenExam\Models\Invigilator;
use OpenExam\Models\Lock;
use OpenExam\Models\Question;
use OpenExam\Models\Resource;
use OpenExam\Models\Result;
use OpenExam\Models\Room;
use OpenExam\Models\Student;
use OpenExam\Models\Teacher;
use OpenExam\Models\Topic;
use OpenExam\Plugins\Security\Model\ObjectAccess;

/**
 * This class was generated by OpenExam\Library\WebService\Soap\ServiceGenerator
 * Date: 10/22/14 02:13:51
 */
class CoreService implements SoapHandler
{
	/**
	 * The core handler object.
	 * @var CoreHandler
	 */
	 private $core;

	/**
	 * The authenticated user.
	 * @var User
	 */
	 private $user;

	/**
	 * Constructor
	 * @param User $user The authenticated user.
	 */
	public function __construct($user)
	{
                $this->user = $user;
	}

	/**
	 * Add single admin.
	 * @param Handle $handle The handle object.
	 * @param Admin $admin The admin object.
	 * @return int The created admin ID.
	 */
	public function addAdmin($handle, $admin)
	{
                $this->initialize($handle);
                $result = $this->core->action($admin, ObjectAccess::CREATE);
                return $result->id;
	}

	/**
	 * Add list of admins.
	 * @param Handle $handle The handle object.
	 * @param Admin[] $admins The list of admin object.
	 * @return Admin[] The list of created admins.
	 */
	public function addAdmins($handle, $admins)
	{
                $this->initialize($handle);
                return $this->core->action($admins, ObjectAccess::CREATE);
	}

	/**
	 * Add single answer.
	 * @param Handle $handle The handle object.
	 * @param Answer $answer The answer object.
	 * @return int The created answer ID.
	 */
	public function addAnswer($handle, $answer)
	{
                $this->initialize($handle);
                $result = $this->core->action($answer, ObjectAccess::CREATE);
                return $result->id;
	}

	/**
	 * Add list of answers.
	 * @param Handle $handle The handle object.
	 * @param Answer[] $answers The list of answer object.
	 * @return Answer[] The list of created answers.
	 */
	public function addAnswers($handle, $answers)
	{
                $this->initialize($handle);
                return $this->core->action($answers, ObjectAccess::CREATE);
	}

	/**
	 * Add single computer.
	 * @param Handle $handle The handle object.
	 * @param Computer $computer The computer object.
	 * @return int The created computer ID.
	 */
	public function addComputer($handle, $computer)
	{
                $this->initialize($handle);
                $result = $this->core->action($computer, ObjectAccess::CREATE);
                return $result->id;
	}

	/**
	 * Add list of computers.
	 * @param Handle $handle The handle object.
	 * @param Computer[] $computers The list of computer object.
	 * @return Computer[] The list of created computers.
	 */
	public function addComputers($handle, $computers)
	{
                $this->initialize($handle);
                return $this->core->action($computers, ObjectAccess::CREATE);
	}

	/**
	 * Add single contributor.
	 * @param Handle $handle The handle object.
	 * @param Contributor $contributor The contributor object.
	 * @return int The created contributor ID.
	 */
	public function addContributor($handle, $contributor)
	{
                $this->initialize($handle);
                $result = $this->core->action($contributor, ObjectAccess::CREATE);
                return $result->id;
	}

	/**
	 * Add list of contributors.
	 * @param Handle $handle The handle object.
	 * @param Contributor[] $contributors The list of contributor object.
	 * @return Contributor[] The list of created contributors.
	 */
	public function addContributors($handle, $contributors)
	{
                $this->initialize($handle);
                return $this->core->action($contributors, ObjectAccess::CREATE);
	}

	/**
	 * Add single corrector.
	 * @param Handle $handle The handle object.
	 * @param Corrector $corrector The corrector object.
	 * @return int The created corrector ID.
	 */
	public function addCorrector($handle, $corrector)
	{
                $this->initialize($handle);
                $result = $this->core->action($corrector, ObjectAccess::CREATE);
                return $result->id;
	}

	/**
	 * Add list of correctors.
	 * @param Handle $handle The handle object.
	 * @param Corrector[] $correctors The list of corrector object.
	 * @return Corrector[] The list of created correctors.
	 */
	public function addCorrectors($handle, $correctors)
	{
                $this->initialize($handle);
                return $this->core->action($correctors, ObjectAccess::CREATE);
	}

	/**
	 * Add single decoder.
	 * @param Handle $handle The handle object.
	 * @param Decoder $decoder The decoder object.
	 * @return int The created decoder ID.
	 */
	public function addDecoder($handle, $decoder)
	{
                $this->initialize($handle);
                $result = $this->core->action($decoder, ObjectAccess::CREATE);
                return $result->id;
	}

	/**
	 * Add list of decoders.
	 * @param Handle $handle The handle object.
	 * @param Decoder[] $decoders The list of decoder object.
	 * @return Decoder[] The list of created decoders.
	 */
	public function addDecoders($handle, $decoders)
	{
                $this->initialize($handle);
                return $this->core->action($decoders, ObjectAccess::CREATE);
	}

	/**
	 * Add single exam.
	 * @param Handle $handle The handle object.
	 * @param Exam $exam The exam object.
	 * @return int The created exam ID.
	 */
	public function addExam($handle, $exam)
	{
                $this->initialize($handle);
                $result = $this->core->action($exam, ObjectAccess::CREATE);
                return $result->id;
	}

	/**
	 * Add list of exams.
	 * @param Handle $handle The handle object.
	 * @param Exam[] $exams The list of exam object.
	 * @return Exam[] The list of created exams.
	 */
	public function addExams($handle, $exams)
	{
                $this->initialize($handle);
                return $this->core->action($exams, ObjectAccess::CREATE);
	}

	/**
	 * Add single file.
	 * @param Handle $handle The handle object.
	 * @param File $file The file object.
	 * @return int The created file ID.
	 */
	public function addFile($handle, $file)
	{
                $this->initialize($handle);
                $result = $this->core->action($file, ObjectAccess::CREATE);
                return $result->id;
	}

	/**
	 * Add list of files.
	 * @param Handle $handle The handle object.
	 * @param File[] $files The list of file object.
	 * @return File[] The list of created files.
	 */
	public function addFiles($handle, $files)
	{
                $this->initialize($handle);
                return $this->core->action($files, ObjectAccess::CREATE);
	}

	/**
	 * Add single invigilator.
	 * @param Handle $handle The handle object.
	 * @param Invigilator $invigilator The invigilator object.
	 * @return int The created invigilator ID.
	 */
	public function addInvigilator($handle, $invigilator)
	{
                $this->initialize($handle);
                $result = $this->core->action($invigilator, ObjectAccess::CREATE);
                return $result->id;
	}

	/**
	 * Add list of invigilators.
	 * @param Handle $handle The handle object.
	 * @param Invigilator[] $invigilators The list of invigilator object.
	 * @return Invigilator[] The list of created invigilators.
	 */
	public function addInvigilators($handle, $invigilators)
	{
                $this->initialize($handle);
                return $this->core->action($invigilators, ObjectAccess::CREATE);
	}

	/**
	 * Add single lock.
	 * @param Handle $handle The handle object.
	 * @param Lock $lock The lock object.
	 * @return int The created lock ID.
	 */
	public function addLock($handle, $lock)
	{
                $this->initialize($handle);
                $result = $this->core->action($lock, ObjectAccess::CREATE);
                return $result->id;
	}

	/**
	 * Add list of locks.
	 * @param Handle $handle The handle object.
	 * @param Lock[] $locks The list of lock object.
	 * @return Lock[] The list of created locks.
	 */
	public function addLocks($handle, $locks)
	{
                $this->initialize($handle);
                return $this->core->action($locks, ObjectAccess::CREATE);
	}

	/**
	 * Add single question.
	 * @param Handle $handle The handle object.
	 * @param Question $question The question object.
	 * @return int The created question ID.
	 */
	public function addQuestion($handle, $question)
	{
                $this->initialize($handle);
                $result = $this->core->action($question, ObjectAccess::CREATE);
                return $result->id;
	}

	/**
	 * Add list of questions.
	 * @param Handle $handle The handle object.
	 * @param Question[] $questions The list of question object.
	 * @return Question[] The list of created questions.
	 */
	public function addQuestions($handle, $questions)
	{
                $this->initialize($handle);
                return $this->core->action($questions, ObjectAccess::CREATE);
	}

	/**
	 * Add single resource.
	 * @param Handle $handle The handle object.
	 * @param Resource $resource The resource object.
	 * @return int The created resource ID.
	 */
	public function addResource($handle, $resource)
	{
                $this->initialize($handle);
                $result = $this->core->action($resource, ObjectAccess::CREATE);
                return $result->id;
	}

	/**
	 * Add list of resources.
	 * @param Handle $handle The handle object.
	 * @param Resource[] $resources The list of resource object.
	 * @return Resource[] The list of created resources.
	 */
	public function addResources($handle, $resources)
	{
                $this->initialize($handle);
                return $this->core->action($resources, ObjectAccess::CREATE);
	}

	/**
	 * Add single result.
	 * @param Handle $handle The handle object.
	 * @param Result $result The result object.
	 * @return int The created result ID.
	 */
	public function addResult($handle, $result)
	{
                $this->initialize($handle);
                $result = $this->core->action($result, ObjectAccess::CREATE);
                return $result->id;
	}

	/**
	 * Add list of results.
	 * @param Handle $handle The handle object.
	 * @param Result[] $results The list of result object.
	 * @return Result[] The list of created results.
	 */
	public function addResults($handle, $results)
	{
                $this->initialize($handle);
                return $this->core->action($results, ObjectAccess::CREATE);
	}

	/**
	 * Add single room.
	 * @param Handle $handle The handle object.
	 * @param Room $room The room object.
	 * @return int The created room ID.
	 */
	public function addRoom($handle, $room)
	{
                $this->initialize($handle);
                $result = $this->core->action($room, ObjectAccess::CREATE);
                return $result->id;
	}

	/**
	 * Add list of rooms.
	 * @param Handle $handle The handle object.
	 * @param Room[] $rooms The list of room object.
	 * @return Room[] The list of created rooms.
	 */
	public function addRooms($handle, $rooms)
	{
                $this->initialize($handle);
                return $this->core->action($rooms, ObjectAccess::CREATE);
	}

	/**
	 * Add single student.
	 * @param Handle $handle The handle object.
	 * @param Student $student The student object.
	 * @return int The created student ID.
	 */
	public function addStudent($handle, $student)
	{
                $this->initialize($handle);
                $result = $this->core->action($student, ObjectAccess::CREATE);
                return $result->id;
	}

	/**
	 * Add list of students.
	 * @param Handle $handle The handle object.
	 * @param Student[] $students The list of student object.
	 * @return Student[] The list of created students.
	 */
	public function addStudents($handle, $students)
	{
                $this->initialize($handle);
                return $this->core->action($students, ObjectAccess::CREATE);
	}

	/**
	 * Add single teacher.
	 * @param Handle $handle The handle object.
	 * @param Teacher $teacher The teacher object.
	 * @return int The created teacher ID.
	 */
	public function addTeacher($handle, $teacher)
	{
                $this->initialize($handle);
                $result = $this->core->action($teacher, ObjectAccess::CREATE);
                return $result->id;
	}

	/**
	 * Add list of teachers.
	 * @param Handle $handle The handle object.
	 * @param Teacher[] $teachers The list of teacher object.
	 * @return Teacher[] The list of created teachers.
	 */
	public function addTeachers($handle, $teachers)
	{
                $this->initialize($handle);
                return $this->core->action($teachers, ObjectAccess::CREATE);
	}

	/**
	 * Add single topic.
	 * @param Handle $handle The handle object.
	 * @param Topic $topic The topic object.
	 * @return int The created topic ID.
	 */
	public function addTopic($handle, $topic)
	{
                $this->initialize($handle);
                $result = $this->core->action($topic, ObjectAccess::CREATE);
                return $result->id;
	}

	/**
	 * Add list of topics.
	 * @param Handle $handle The handle object.
	 * @param Topic[] $topics The list of topic object.
	 * @return Topic[] The list of created topics.
	 */
	public function addTopics($handle, $topics)
	{
                $this->initialize($handle);
                return $this->core->action($topics, ObjectAccess::CREATE);
	}

	/**
	 * Delete admin.
	 * @param Handle $handle The handle object.
	 * @param int $id The admin ID.
	 * @return boolean True if successful.
	 */
	public function deleteAdmin($handle, $id)
	{
                $this->initialize($handle);
                $model = new Admin();
                $model->id = $id;
                return $this->core->action($model, ObjectAccess::DELETE);
	}

	/**
	 * Delete answer.
	 * @param Handle $handle The handle object.
	 * @param int $id The answer ID.
	 * @return boolean True if successful.
	 */
	public function deleteAnswer($handle, $id)
	{
                $this->initialize($handle);
                $model = new Answer();
                $model->id = $id;
                return $this->core->action($model, ObjectAccess::DELETE);
	}

	/**
	 * Delete computer.
	 * @param Handle $handle The handle object.
	 * @param int $id The computer ID.
	 * @return boolean True if successful.
	 */
	public function deleteComputer($handle, $id)
	{
                $this->initialize($handle);
                $model = new Computer();
                $model->id = $id;
                return $this->core->action($model, ObjectAccess::DELETE);
	}

	/**
	 * Delete contributor.
	 * @param Handle $handle The handle object.
	 * @param int $id The contributor ID.
	 * @return boolean True if successful.
	 */
	public function deleteContributor($handle, $id)
	{
                $this->initialize($handle);
                $model = new Contributor();
                $model->id = $id;
                return $this->core->action($model, ObjectAccess::DELETE);
	}

	/**
	 * Delete corrector.
	 * @param Handle $handle The handle object.
	 * @param int $id The corrector ID.
	 * @return boolean True if successful.
	 */
	public function deleteCorrector($handle, $id)
	{
                $this->initialize($handle);
                $model = new Corrector();
                $model->id = $id;
                return $this->core->action($model, ObjectAccess::DELETE);
	}

	/**
	 * Delete decoder.
	 * @param Handle $handle The handle object.
	 * @param int $id The decoder ID.
	 * @return boolean True if successful.
	 */
	public function deleteDecoder($handle, $id)
	{
                $this->initialize($handle);
                $model = new Decoder();
                $model->id = $id;
                return $this->core->action($model, ObjectAccess::DELETE);
	}

	/**
	 * Delete exam.
	 * @param Handle $handle The handle object.
	 * @param int $id The exam ID.
	 * @return boolean True if successful.
	 */
	public function deleteExam($handle, $id)
	{
                $this->initialize($handle);
                $model = new Exam();
                $model->id = $id;
                return $this->core->action($model, ObjectAccess::DELETE);
	}

	/**
	 * Delete file.
	 * @param Handle $handle The handle object.
	 * @param int $id The file ID.
	 * @return boolean True if successful.
	 */
	public function deleteFile($handle, $id)
	{
                $this->initialize($handle);
                $model = new File();
                $model->id = $id;
                return $this->core->action($model, ObjectAccess::DELETE);
	}

	/**
	 * Delete invigilator.
	 * @param Handle $handle The handle object.
	 * @param int $id The invigilator ID.
	 * @return boolean True if successful.
	 */
	public function deleteInvigilator($handle, $id)
	{
                $this->initialize($handle);
                $model = new Invigilator();
                $model->id = $id;
                return $this->core->action($model, ObjectAccess::DELETE);
	}

	/**
	 * Delete lock.
	 * @param Handle $handle The handle object.
	 * @param int $id The lock ID.
	 * @return boolean True if successful.
	 */
	public function deleteLock($handle, $id)
	{
                $this->initialize($handle);
                $model = new Lock();
                $model->id = $id;
                return $this->core->action($model, ObjectAccess::DELETE);
	}

	/**
	 * Delete question.
	 * @param Handle $handle The handle object.
	 * @param int $id The question ID.
	 * @return boolean True if successful.
	 */
	public function deleteQuestion($handle, $id)
	{
                $this->initialize($handle);
                $model = new Question();
                $model->id = $id;
                return $this->core->action($model, ObjectAccess::DELETE);
	}

	/**
	 * Delete resource.
	 * @param Handle $handle The handle object.
	 * @param int $id The resource ID.
	 * @return boolean True if successful.
	 */
	public function deleteResource($handle, $id)
	{
                $this->initialize($handle);
                $model = new Resource();
                $model->id = $id;
                return $this->core->action($model, ObjectAccess::DELETE);
	}

	/**
	 * Delete result.
	 * @param Handle $handle The handle object.
	 * @param int $id The result ID.
	 * @return boolean True if successful.
	 */
	public function deleteResult($handle, $id)
	{
                $this->initialize($handle);
                $model = new Result();
                $model->id = $id;
                return $this->core->action($model, ObjectAccess::DELETE);
	}

	/**
	 * Delete room.
	 * @param Handle $handle The handle object.
	 * @param int $id The room ID.
	 * @return boolean True if successful.
	 */
	public function deleteRoom($handle, $id)
	{
                $this->initialize($handle);
                $model = new Room();
                $model->id = $id;
                return $this->core->action($model, ObjectAccess::DELETE);
	}

	/**
	 * Delete student.
	 * @param Handle $handle The handle object.
	 * @param int $id The student ID.
	 * @return boolean True if successful.
	 */
	public function deleteStudent($handle, $id)
	{
                $this->initialize($handle);
                $model = new Student();
                $model->id = $id;
                return $this->core->action($model, ObjectAccess::DELETE);
	}

	/**
	 * Delete teacher.
	 * @param Handle $handle The handle object.
	 * @param int $id The teacher ID.
	 * @return boolean True if successful.
	 */
	public function deleteTeacher($handle, $id)
	{
                $this->initialize($handle);
                $model = new Teacher();
                $model->id = $id;
                return $this->core->action($model, ObjectAccess::DELETE);
	}

	/**
	 * Delete topic.
	 * @param Handle $handle The handle object.
	 * @param int $id The topic ID.
	 * @return boolean True if successful.
	 */
	public function deleteTopic($handle, $id)
	{
                $this->initialize($handle);
                $model = new Topic();
                $model->id = $id;
                return $this->core->action($model, ObjectAccess::DELETE);
	}

	/**
	 * Read single admin.
	 * @param Handle $handle The handle object.
	 * @param int $id The admin ID.
	 * @return Admin The admin object.
	 */
	public function getAdmin($handle, $id)
	{
                $this->initialize($handle);
                $model = new Admin();
                $model->id = $id;
                return $this->core->action($model, ObjectAccess::READ);
	}

	/**
	 * Read list of admins.
	 * @param Handle $handle The handle object.
	 * @return Admin[] The admin list.
	 */
	public function getAdmins($handle)
	{
                $this->initialize($handle);
                return $this->core->action(new Admin(), ObjectAccess::READ);
	}

	/**
	 * Read single answer.
	 * @param Handle $handle The handle object.
	 * @param int $id The answer ID.
	 * @return Answer The answer object.
	 */
	public function getAnswer($handle, $id)
	{
                $this->initialize($handle);
                $model = new Answer();
                $model->id = $id;
                return $this->core->action($model, ObjectAccess::READ);
	}

	/**
	 * Read list of answers.
	 * @param Handle $handle The handle object.
	 * @return Answer[] The answer list.
	 */
	public function getAnswers($handle)
	{
                $this->initialize($handle);
                return $this->core->action(new Answer(), ObjectAccess::READ);
	}

	/**
	 * Read single computer.
	 * @param Handle $handle The handle object.
	 * @param int $id The computer ID.
	 * @return Computer The computer object.
	 */
	public function getComputer($handle, $id)
	{
                $this->initialize($handle);
                $model = new Computer();
                $model->id = $id;
                return $this->core->action($model, ObjectAccess::READ);
	}

	/**
	 * Read list of computers.
	 * @param Handle $handle The handle object.
	 * @return Computer[] The computer list.
	 */
	public function getComputers($handle)
	{
                $this->initialize($handle);
                return $this->core->action(new Computer(), ObjectAccess::READ);
	}

	/**
	 * Read single contributor.
	 * @param Handle $handle The handle object.
	 * @param int $id The contributor ID.
	 * @return Contributor The contributor object.
	 */
	public function getContributor($handle, $id)
	{
                $this->initialize($handle);
                $model = new Contributor();
                $model->id = $id;
                return $this->core->action($model, ObjectAccess::READ);
	}

	/**
	 * Read list of contributors.
	 * @param Handle $handle The handle object.
	 * @return Contributor[] The contributor list.
	 */
	public function getContributors($handle)
	{
                $this->initialize($handle);
                return $this->core->action(new Contributor(), ObjectAccess::READ);
	}

	/**
	 * Read single corrector.
	 * @param Handle $handle The handle object.
	 * @param int $id The corrector ID.
	 * @return Corrector The corrector object.
	 */
	public function getCorrector($handle, $id)
	{
                $this->initialize($handle);
                $model = new Corrector();
                $model->id = $id;
                return $this->core->action($model, ObjectAccess::READ);
	}

	/**
	 * Read list of correctors.
	 * @param Handle $handle The handle object.
	 * @return Corrector[] The corrector list.
	 */
	public function getCorrectors($handle)
	{
                $this->initialize($handle);
                return $this->core->action(new Corrector(), ObjectAccess::READ);
	}

	/**
	 * Read single decoder.
	 * @param Handle $handle The handle object.
	 * @param int $id The decoder ID.
	 * @return Decoder The decoder object.
	 */
	public function getDecoder($handle, $id)
	{
                $this->initialize($handle);
                $model = new Decoder();
                $model->id = $id;
                return $this->core->action($model, ObjectAccess::READ);
	}

	/**
	 * Read list of decoders.
	 * @param Handle $handle The handle object.
	 * @return Decoder[] The decoder list.
	 */
	public function getDecoders($handle)
	{
                $this->initialize($handle);
                return $this->core->action(new Decoder(), ObjectAccess::READ);
	}

	/**
	 * Read single exam.
	 * @param Handle $handle The handle object.
	 * @param int $id The exam ID.
	 * @return Exam The exam object.
	 */
	public function getExam($handle, $id)
	{
                $this->initialize($handle);
                $model = new Exam();
                $model->id = $id;
                return $this->core->action($model, ObjectAccess::READ);
	}

	/**
	 * Read list of exams.
	 * @param Handle $handle The handle object.
	 * @return Exam[] The exam list.
	 */
	public function getExams($handle)
	{
                $this->initialize($handle);
                return $this->core->action(new Exam(), ObjectAccess::READ);
	}

	/**
	 * Read single file.
	 * @param Handle $handle The handle object.
	 * @param int $id The file ID.
	 * @return File The file object.
	 */
	public function getFile($handle, $id)
	{
                $this->initialize($handle);
                $model = new File();
                $model->id = $id;
                return $this->core->action($model, ObjectAccess::READ);
	}

	/**
	 * Read list of files.
	 * @param Handle $handle The handle object.
	 * @return File[] The file list.
	 */
	public function getFiles($handle)
	{
                $this->initialize($handle);
                return $this->core->action(new File(), ObjectAccess::READ);
	}

	/**
	 * Read single invigilator.
	 * @param Handle $handle The handle object.
	 * @param int $id The invigilator ID.
	 * @return Invigilator The invigilator object.
	 */
	public function getInvigilator($handle, $id)
	{
                $this->initialize($handle);
                $model = new Invigilator();
                $model->id = $id;
                return $this->core->action($model, ObjectAccess::READ);
	}

	/**
	 * Read list of invigilators.
	 * @param Handle $handle The handle object.
	 * @return Invigilator[] The invigilator list.
	 */
	public function getInvigilators($handle)
	{
                $this->initialize($handle);
                return $this->core->action(new Invigilator(), ObjectAccess::READ);
	}

	/**
	 * Read single lock.
	 * @param Handle $handle The handle object.
	 * @param int $id The lock ID.
	 * @return Lock The lock object.
	 */
	public function getLock($handle, $id)
	{
                $this->initialize($handle);
                $model = new Lock();
                $model->id = $id;
                return $this->core->action($model, ObjectAccess::READ);
	}

	/**
	 * Read list of locks.
	 * @param Handle $handle The handle object.
	 * @return Lock[] The lock list.
	 */
	public function getLocks($handle)
	{
                $this->initialize($handle);
                return $this->core->action(new Lock(), ObjectAccess::READ);
	}

	/**
	 * Read single question.
	 * @param Handle $handle The handle object.
	 * @param int $id The question ID.
	 * @return Question The question object.
	 */
	public function getQuestion($handle, $id)
	{
                $this->initialize($handle);
                $model = new Question();
                $model->id = $id;
                return $this->core->action($model, ObjectAccess::READ);
	}

	/**
	 * Read list of questions.
	 * @param Handle $handle The handle object.
	 * @return Question[] The question list.
	 */
	public function getQuestions($handle)
	{
                $this->initialize($handle);
                return $this->core->action(new Question(), ObjectAccess::READ);
	}

	/**
	 * Read single resource.
	 * @param Handle $handle The handle object.
	 * @param int $id The resource ID.
	 * @return Resource The resource object.
	 */
	public function getResource($handle, $id)
	{
                $this->initialize($handle);
                $model = new Resource();
                $model->id = $id;
                return $this->core->action($model, ObjectAccess::READ);
	}

	/**
	 * Read list of resources.
	 * @param Handle $handle The handle object.
	 * @return Resource[] The resource list.
	 */
	public function getResources($handle)
	{
                $this->initialize($handle);
                return $this->core->action(new Resource(), ObjectAccess::READ);
	}

	/**
	 * Read single result.
	 * @param Handle $handle The handle object.
	 * @param int $id The result ID.
	 * @return Result The result object.
	 */
	public function getResult($handle, $id)
	{
                $this->initialize($handle);
                $model = new Result();
                $model->id = $id;
                return $this->core->action($model, ObjectAccess::READ);
	}

	/**
	 * Read list of results.
	 * @param Handle $handle The handle object.
	 * @return Result[] The result list.
	 */
	public function getResults($handle)
	{
                $this->initialize($handle);
                return $this->core->action(new Result(), ObjectAccess::READ);
	}

	/**
	 * Read single room.
	 * @param Handle $handle The handle object.
	 * @param int $id The room ID.
	 * @return Room The room object.
	 */
	public function getRoom($handle, $id)
	{
                $this->initialize($handle);
                $model = new Room();
                $model->id = $id;
                return $this->core->action($model, ObjectAccess::READ);
	}

	/**
	 * Read list of rooms.
	 * @param Handle $handle The handle object.
	 * @return Room[] The room list.
	 */
	public function getRooms($handle)
	{
                $this->initialize($handle);
                return $this->core->action(new Room(), ObjectAccess::READ);
	}

	/**
	 * Read single student.
	 * @param Handle $handle The handle object.
	 * @param int $id The student ID.
	 * @return Student The student object.
	 */
	public function getStudent($handle, $id)
	{
                $this->initialize($handle);
                $model = new Student();
                $model->id = $id;
                return $this->core->action($model, ObjectAccess::READ);
	}

	/**
	 * Read list of students.
	 * @param Handle $handle The handle object.
	 * @return Student[] The student list.
	 */
	public function getStudents($handle)
	{
                $this->initialize($handle);
                return $this->core->action(new Student(), ObjectAccess::READ);
	}

	/**
	 * Read single teacher.
	 * @param Handle $handle The handle object.
	 * @param int $id The teacher ID.
	 * @return Teacher The teacher object.
	 */
	public function getTeacher($handle, $id)
	{
                $this->initialize($handle);
                $model = new Teacher();
                $model->id = $id;
                return $this->core->action($model, ObjectAccess::READ);
	}

	/**
	 * Read list of teachers.
	 * @param Handle $handle The handle object.
	 * @return Teacher[] The teacher list.
	 */
	public function getTeachers($handle)
	{
                $this->initialize($handle);
                return $this->core->action(new Teacher(), ObjectAccess::READ);
	}

	/**
	 * Read single topic.
	 * @param Handle $handle The handle object.
	 * @param int $id The topic ID.
	 * @return Topic The topic object.
	 */
	public function getTopic($handle, $id)
	{
                $this->initialize($handle);
                $model = new Topic();
                $model->id = $id;
                return $this->core->action($model, ObjectAccess::READ);
	}

	/**
	 * Read list of topics.
	 * @param Handle $handle The handle object.
	 * @return Topic[] The topic list.
	 */
	public function getTopics($handle)
	{
                $this->initialize($handle);
                return $this->core->action(new Topic(), ObjectAccess::READ);
	}

	/**
	 * Initialize function for SOAP call.
	 * @param Handle $handle 
	 * @throws SecurityException
	 */
	private function initialize($handle)
	{
                if ($this->user->getUser() == null) {
                        throw new SecurityException("User is not authenticated.");
                }
                
                if (!isset($handle->role) || strlen($handle->role) == 0) {
                        throw new SecurityException("The requested role is not set.");
                } elseif ($this->user->roles->acquire($handle->role) == false) {
                        throw new SecurityException("Failed acquire requested role.");
                } else {
                        $this->user->setPrimaryRole($handle->role);
                }
                    
                if (!isset($this->core)) {
                        $this->core = new CoreHandler($handle->role);
                }
                
                return $handle;
	}

	/**
	 * Open SOAP service handle for subsequent calls.
	 * @param Handle $handle The handle object (input).
	 * @return Handle The handle object (return).
	 */
	public function openExam($handle)
	{
                return $this->initialize($handle);
	}

	/**
	 * Edit (update/set) admin.
	 * @param Handle $handle The handle object.
	 * @param Admin $admin The admin object.
	 * @return boolean True if successful.
	 */
	public function setAdmin($handle, $admin)
	{
                $this->initialize($handle);
                return $this->core->action($admin, ObjectAccess::UPDATE);
	}

	/**
	 * Edit (update/set) answer.
	 * @param Handle $handle The handle object.
	 * @param Answer $answer The answer object.
	 * @return boolean True if successful.
	 */
	public function setAnswer($handle, $answer)
	{
                $this->initialize($handle);
                return $this->core->action($answer, ObjectAccess::UPDATE);
	}

	/**
	 * Edit (update/set) computer.
	 * @param Handle $handle The handle object.
	 * @param Computer $computer The computer object.
	 * @return boolean True if successful.
	 */
	public function setComputer($handle, $computer)
	{
                $this->initialize($handle);
                return $this->core->action($computer, ObjectAccess::UPDATE);
	}

	/**
	 * Edit (update/set) contributor.
	 * @param Handle $handle The handle object.
	 * @param Contributor $contributor The contributor object.
	 * @return boolean True if successful.
	 */
	public function setContributor($handle, $contributor)
	{
                $this->initialize($handle);
                return $this->core->action($contributor, ObjectAccess::UPDATE);
	}

	/**
	 * Edit (update/set) corrector.
	 * @param Handle $handle The handle object.
	 * @param Corrector $corrector The corrector object.
	 * @return boolean True if successful.
	 */
	public function setCorrector($handle, $corrector)
	{
                $this->initialize($handle);
                return $this->core->action($corrector, ObjectAccess::UPDATE);
	}

	/**
	 * Edit (update/set) decoder.
	 * @param Handle $handle The handle object.
	 * @param Decoder $decoder The decoder object.
	 * @return boolean True if successful.
	 */
	public function setDecoder($handle, $decoder)
	{
                $this->initialize($handle);
                return $this->core->action($decoder, ObjectAccess::UPDATE);
	}

	/**
	 * Edit (update/set) exam.
	 * @param Handle $handle The handle object.
	 * @param Exam $exam The exam object.
	 * @return boolean True if successful.
	 */
	public function setExam($handle, $exam)
	{
                $this->initialize($handle);
                return $this->core->action($exam, ObjectAccess::UPDATE);
	}

	/**
	 * Edit (update/set) file.
	 * @param Handle $handle The handle object.
	 * @param File $file The file object.
	 * @return boolean True if successful.
	 */
	public function setFile($handle, $file)
	{
                $this->initialize($handle);
                return $this->core->action($file, ObjectAccess::UPDATE);
	}

	/**
	 * Edit (update/set) invigilator.
	 * @param Handle $handle The handle object.
	 * @param Invigilator $invigilator The invigilator object.
	 * @return boolean True if successful.
	 */
	public function setInvigilator($handle, $invigilator)
	{
                $this->initialize($handle);
                return $this->core->action($invigilator, ObjectAccess::UPDATE);
	}

	/**
	 * Edit (update/set) lock.
	 * @param Handle $handle The handle object.
	 * @param Lock $lock The lock object.
	 * @return boolean True if successful.
	 */
	public function setLock($handle, $lock)
	{
                $this->initialize($handle);
                return $this->core->action($lock, ObjectAccess::UPDATE);
	}

	/**
	 * Edit (update/set) question.
	 * @param Handle $handle The handle object.
	 * @param Question $question The question object.
	 * @return boolean True if successful.
	 */
	public function setQuestion($handle, $question)
	{
                $this->initialize($handle);
                return $this->core->action($question, ObjectAccess::UPDATE);
	}

	/**
	 * Edit (update/set) resource.
	 * @param Handle $handle The handle object.
	 * @param Resource $resource The resource object.
	 * @return boolean True if successful.
	 */
	public function setResource($handle, $resource)
	{
                $this->initialize($handle);
                return $this->core->action($resource, ObjectAccess::UPDATE);
	}

	/**
	 * Edit (update/set) result.
	 * @param Handle $handle The handle object.
	 * @param Result $result The result object.
	 * @return boolean True if successful.
	 */
	public function setResult($handle, $result)
	{
                $this->initialize($handle);
                return $this->core->action($result, ObjectAccess::UPDATE);
	}

	/**
	 * Edit (update/set) room.
	 * @param Handle $handle The handle object.
	 * @param Room $room The room object.
	 * @return boolean True if successful.
	 */
	public function setRoom($handle, $room)
	{
                $this->initialize($handle);
                return $this->core->action($room, ObjectAccess::UPDATE);
	}

	/**
	 * Edit (update/set) student.
	 * @param Handle $handle The handle object.
	 * @param Student $student The student object.
	 * @return boolean True if successful.
	 */
	public function setStudent($handle, $student)
	{
                $this->initialize($handle);
                return $this->core->action($student, ObjectAccess::UPDATE);
	}

	/**
	 * Edit (update/set) teacher.
	 * @param Handle $handle The handle object.
	 * @param Teacher $teacher The teacher object.
	 * @return boolean True if successful.
	 */
	public function setTeacher($handle, $teacher)
	{
                $this->initialize($handle);
                return $this->core->action($teacher, ObjectAccess::UPDATE);
	}

	/**
	 * Edit (update/set) topic.
	 * @param Handle $handle The handle object.
	 * @param Topic $topic The topic object.
	 * @return boolean True if successful.
	 */
	public function setTopic($handle, $topic)
	{
                $this->initialize($handle);
                return $this->core->action($topic, ObjectAccess::UPDATE);
	}

}
