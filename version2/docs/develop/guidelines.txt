
   ****************************************************
    Development guidelines for OpenExam
   ****************************************************


** Netbeans IDE:

   Use Netbeans PHP as IDE. Format the source code using "Alt + Shift + F" on file
   or directory before commit. Using common formatting rules makes the source code 
   easier to read and helps to keep diffs and commits small.

** Composer:

   Never make changes or fix code in the vendor directory. Any changes are lost 
   on update. Make changes in affected packages (when possible), composer.json or 
   inside Composer hooks. 
   
** Security:

   a) Security is a number one priority.

   b) All access to models should be authenticated. Authorization should be done to
      unsure the caller are allowed to access any result-set or object coming from
      the model.

   c) Perform regular security scans.

** Coding:

    o) Keep all code in objects. Don't pollute the global namespace.

    o) All classes should belong in a namespace, mapped against the directory structure.

    o) Always use autoloading. Only use include() or require() when bringing in 
       config files or in special cases. Don't use $loader->registerDirs(), its
       for non-namespace aware applications only.

   o) Always surround statements in code blocks:

        if ($condition) {
                // statements...
        }

    o) Use the "coding against interface" pattern when appropriate.

    o) Use traits to add behaviors to class or for overcoming lack of multiple inheritance.

    o) Run unit tests after changing any class that maintain state (data classes).

** Locations:

   o) Everything under phalcon-mcv/app is application code. 

   o) Static content (e.g. HTML, CSS and Javascript) goes under phalcon-mcv/public. 

   o) Data files (e.g. cache, schemas and log-files) belongs in sub-directories 
      under phalcon-mcv, e.g. phalcon-mcv/cache. Some of these locations can be 
      overridden by the system administrator.

** Optimization:

   a) Don't attempt to optimize code "by making assumption" on code execution. 
      Use a profiler first. Most bottleneck are usually found in different areas 
      than those expected. 

   b) Use builtin classes and functions whenever possible.

** Patches:

   Place any patches (unified diff -Naur) in admin/patch/. Add notice about the
   problem they are fixing, author and date at top.

// Anders LÃ¶vgren, 2014-09-08
