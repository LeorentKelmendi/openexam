<?php

namespace OpenExam\Library\Core;

use OpenExam\Tests\Phalcon\TestCase;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-04-08 at 12:03:33.
 */
class SettingsTest extends TestCase
{

        /**
         * @var Settings
         */
        protected $object;

        /**
         * Sets up the fixture, for example, opens a network connection.
         * This method is called before a test is executed.
         */
        protected function setUp()
        {
                $this->object = new Settings();
                $this->object->clear();
        }

        /**
         * Tears down the fixture, for example, closes a network connection.
         * This method is called after a test is executed.
         */
        protected function tearDown()
        {
                $this->object->delete();
        }
        
        /**
         * @covers OpenExam\Library\Core\Settings::__destruct
         * @group core
         */
        public function test__destruct()
        {
                $expect = time();
                self::assertNotNull($this->object);

                // 
                // Update user setting and read back:
                // 
                $this->object->set('destruct', $expect);
                $this->object = null;   // Save to persistent storage.
                $this->object = new Settings();
                self::assertNotNull($this->object);

                $actual = $this->object->get('destruct');
                self::assertEquals($expect, $actual);
        }

        /**
         * @covers OpenExam\Library\Core\Settings::set
         * @group core
         */
        public function testSet()
        {
                $expect = array('key' => 'val');
                $this->object->set('data', $expect);
                $actual = $this->object->get('data');

                self::assertNotNull($actual);
                self::assertEquals($expect, $actual);
        }

        /**
         * @covers OpenExam\Library\Core\Settings::has
         * @group core
         */
        public function testHas()
        {
                self::assertFalse($this->object->has('key'));
                $this->object->set('key', true);
                self::assertTrue($this->object->has('key'));
                $this->object->set('key', false);
                self::assertTrue($this->object->has('key'));
        }

        /**
         * @covers OpenExam\Library\Core\Settings::get
         * @group core
         */
        public function testGet()
        {
                self::assertNull($this->object->get('key'));
                $this->object->set('key', true);
                self::assertNotNull($this->object->get('key'));
                self::assertTrue(is_bool($this->object->get('key')));
        }

        /**
         * @covers OpenExam\Library\Core\Settings::save
         * @group core
         */
        public function testSave()
        {
                $this->object->set('key', true);
                $this->object->save();
                $this->object->read();
                self::assertNotNull($this->object->get('key'));
                self::assertTrue(is_bool($this->object->get('key')));
        }

        /**
         * @covers OpenExam\Library\Core\Settings::read
         * @group core
         */
        public function testRead()
        {
                $this->object->read();
                $actual = $this->object->data();
                self::assertNotNull($actual);
                self::assertTrue(is_array($actual));
        }

        /**
         * @covers OpenExam\Library\Core\Settings::clear
         * @group core
         */
        public function testClear()
        {
                $this->object->set('key', true);
                $actual = $this->object->data();
                self::assertNotNull($actual);
                self::assertTrue(is_array($actual));
                self::assertTrue(count($actual) == 1);

                $this->object->clear();
                $actual = $this->object->data();
                self::assertNotNull($actual);
                self::assertTrue(is_array($actual));
                self::assertTrue(count($actual) == 0);
        }

        /**
         * @covers OpenExam\Library\Core\Settings::delete
         * @group core
         */
        public function testDelete()
        {
                $expect = $this->object->data();
                $this->object->delete();
                $actual = $this->object->data();
                
                self::assertNotNull($actual);
                self::assertTrue(is_array($actual));
                self::assertTrue(count($actual) == 0);
                self::assertEquals($expect, $actual);
        }

        /**
         * @covers OpenExam\Library\Core\Settings::data
         * @group core
         */
        public function testData()
        {
                $actual = $this->object->data();
                self::assertNotNull($actual);
                self::assertTrue(is_array($actual));
                self::assertTrue(count($actual) == 0);
        }

}
