Models can be managed either using tasks (see phalcon-mvc/script) or direct using
Phalcon devtools.

** Using tasks:
  
   Backup and clean current model, then create new:

        bash$> cd ${appdir}/openexam-php/phalcon-mvc/script
        bash$> php openexam --model --create --clean --backup 

   See help for more information:

        bash$> cd ${appdir}/openexam-php/phalcon-mvc/script
        bash$> php openexam --model --help 

** Using Phalcon devtools:

   Running the all-models script will take care of adding relations between models:

        bash$> cd ${appdir}/openexam-php/phalcon-mvc
        bash$> phalcon all-models --relations --fk --validations --force \
                                  --namespace='OpenExam\Models' \
                                  --extends='ModelBase' \
                                  --config=app/config/devtools

   Unfortunate, the devtools can only create new models, not updating existing. All
   changes has to be applied manual.

** Checked access:

   Access restricted access to the model is enabled by setting a primary role on 
   the user before accessing the model. Doing this enables resource (ACL) and object 
   access in the model:

        $user = $this->getDI()->get('user');
        $user->setPrimaryRole($role);

   Contrary, the access control gets disabled by setting the primary role to null:

        $user->setPrimaryRole(null);

   If using unchecked access (primary role == null) and later turning on access 
   restriction, make sure to persist all models or model cache (pre-save) will
   probably cause problems.

   The special role cacls is intended for internal use only on server side to disable 
   access control by the model while performing trusted operations, like accessing the 
   model for checking roles.

// Anders LÃ¶vgren, 2014-09-10
