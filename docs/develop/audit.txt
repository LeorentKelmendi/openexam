Audit is by default disabled. Before enable, the database has to be prepared. See 
docs/README-AUDIT before enable.

** Service:

    The shared audit service is initialized with the user defined audit configuration and
    provides cached config lookup to models, handlers and tasks.

** History:

    Models having audit behavior tracking update changes have support for revision history if
    using data target. The history provides basic version control that supports:

    1. Listing revisions (change log).
    2. Core editing (undo/redo last change).
    3. Reverting state back to previous revision.

    Example:

        $history = $model->getHistory();
        $history->getRevisions();           // Get change log.
        $history->undo();                   // Undo last change.
        $history->redo();                   // Redo last change.
        $history->revert($rev_id);          // Revert back to revision ID.
        $history->save();                   // Apply model changes.

    See notes at bottom about snapshots to fully understand computation of audit changes and
    their limitations.

** Implementing:

    Audit is implemented as behavior on models. The class OpenExam\Library\Model\Audit\Audit is
    used in conjunction with the audit service to support user configurable audit at infrastructure 
    level. The audit configuration is applied in ModelBase for all models/actions/targets enable 
    in config.def:

        // 
        // class ModelBase:
        // 
        protected function initialize()
        {
                if ($this->getDI()->has('audit')) {
                        $audit = $this->getDI()->get('audit');
                        $model = $this->getResourceName();

                        if ($audit->hasConfig($model)) {
                                if (($config = $audit->getConfig($model))) {
                                        $this->addBehavior(new Audit($config));
                                        $this->keepSnapshots(true);             // Required
                                }
                        }
                }
        }

    Audit can also be enforced on a model by adding specific audit behaviors:

        // 
        // class ModelXxx:
        // 
        protected function initialize()
        {
                $this->addBehavior(new AuditDataTarget(array(
                        'connection' => 'dbaudit',
                        'table'      => 'audit'
                )));
                $this->addBehavior(new AuditFileTarget(array(
                        'format'     => FileTarget::FORMAT_JSON,
                        'name'       => '/tmp/audit-xxx.dat'
                )));
                $this->keepSnapshots(true);                                     // Required
        }

** Notes on snapshots:

    For audit to work, the model snapshot data has to be refreshed between updates. This example
    won't work as expected:

        $student = new Student();
        $student->user = "user1@example.com";
        $student->create();     // [1]

        $student->endtime = "2016-04-28 13:00";
        $student->update();

        $student->endtime = "2016-04-28 13:30";
        $student->update();     // Still uses snapshot data from [1]

    For code above to work as expected, the snapshot data must be refreshed between updates:

            ...
        $student = Student::findFirst($student->id);
        $student->endtime = "2016-04-28 13:00";
        $student->update();     // OK

        $student = Student::findFirst($student->id);
        $student->endtime = "2016-04-28 13:30";
        $student->update();     // OK

    Notice that using the core API never leads to these kind of problems as snapshot data is
    always loaded implicit as part of the model action.

// Anders LÃ¶vgren, 2016-04-27
