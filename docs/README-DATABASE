
    ************************************
     README FOR DATABASE SETUP
    ************************************


** DATABASE ADAPTERS:

   OpenExam v2 uses Phalcon's database adapters that is wrapping PDO. Currently 
   the following list of RDMS are supported: 

        * Mysql
        * Postgresql
        * Oracle
        * Sqlite.

** INSTALLATION:

   Installation is either done using the SQL-script (MySQL only) or using the Phalcon Developer 
   Tools (phalcon/devtools)

   o) Using SQL-script:

        mysql> USE openexam
        mysql> SOURCE ${appdir}/openexam-php/phalcon-mvc/schemas/database/openexam.sql;

   o) Using Phalcon Developer Tools:

      The phalcon/devtools is a suggested package that is not installed by default. Use Composer
      to install it if missing:

        bash$> cd ${appdir}/openexam-php
        bash$> composer install phalcon/devtools

      Use phalcon/devtools for database migration:

        bash$> cd ${appdir}/openexam-php/phalcon-mvc
        bash$> ../vendor/bin/phalcon.php migration run --migrations=schemas/migrations

** UPGRADE:

   The procedure is the same when installing the database using phalcon/devtools. Notice 
   that database field type (i.e. enum) gets lost when migrating the database using the 
   devtools!

** MORE INFORMATION:

   See http://php.net/manual/en/pdo.drivers.php for DSN examples.

** CONFIGURATION:

   The database connection (dbread and dbwrite) is configured in app/config/config.def. 
   Connection parameters are either defined using separate parameters or using an DSN:

        //
        // Using separate parameters:
        // 
        'dbwrite' => array(
                'config' => array(
                        'adapter'  => 'Mysql',
                        'host'     => 'localhost',
                        'username' => 'openexam',
                        'password' => 'secret',
                        'dbname'   => 'openexam'
                )
        ),

        //
        // Using DSN:
        // 
        'dbwrite' => array(
                'config' => array(
                    'dns'      => 'mysql:unix_socket=/var/run/mysqld/mysqld.sock;dbname=openexam;charset=utf8;',
                    'username' => 'openexam',
                    'password' => 'secret',
                )
        ),

    o) QUICK START:

    The default setting should give you an configuration that works well in most setups.
    Use deferred and cached database adapter (mediator) with dbcache as backend. For the
    dbcache backend use i.e. redis. 

        'dbwrite'     => array(
                'config' => array(
                    ...
                ),
                'params' => array(
                        'adapter' => array(
                                'cached'     => true,
                                'deferred'   => true                                
                        ),
                        'cache'   => array(
                                'backend' => 'dbcache'  // Use the shared service                                
                        )
                )
        ),

    The performance gain of using a cache stack is almost none (approx. 5-10 ms) while 
    adding a second point of failure with possible data inconsistency.

    o) RETRY:

    Database connection are defined to fail on first connection error. It's possible 
    to configure retry behavior by enabling these options (same setting can be used on 
    all dbxxx):
        
        // 
        // Retry options:
        // 
        'dbread' => array(
                    ...
                'params' => array(
                        'connect' => array(
                                'retry'      => 4,
                                'sleep'      => 2,
                        ),
                    ...
                )
        )

    o) ON-DEMAND CONNECTION:

    Database connection can be deferred until really needed by using the deferred option:

        'dbread' => array(
                    ...
                'params' => array(
                    ...
                        'adapter' => array(
                                    ...
                                'deferred'   => true    // Open connection on-demand  
                        )
                )
        )

    This is useful when caching is enabled. If the result set can be fetched from cache,
    then no database connection is opened. This helps keep the number of needed connection
    low, leaving memory for web server processes instead.

    o) CACHE:

    Query cache can be configured per database connection. Its recommended to disable audit 
    database cache and exclude the answers table from caching (enabled by default).

        // 
        // Cache options:
        // 
        'dbread' => array(
                    ...
                'params' => array(
                    ...
                        'adapter' => array(
                                    ...
                                'cached'     => true,   // Cached database adapter
                        ),                        
                        'cache'   => array(
                                'mediator' => 'request',
                                'exclude'  => array(
                                    'tables' => array('answers'),
                                    'result' => array('count' => true)  // Don't cache counters
                                 )
                                'limits'  => array(
                                    'min' => 1, 
                                    'max' => 25
                                ),
                                'backend' => 'xcache',
                                'options' => array(
                                        'prefix' => 'adapter-cache'
                                )
                        )
                )

    Use the cached option to create a database adapter with cache first/database then 
    behavior. This means that cache is the primary data source, with cache invalidation 
    on write (create, update and delete on table). This gives an aggressive cache policy
    that should be combined with using a deferred database adapter.

    The deferred option creates an database adapter that is unconnected until used in
    first read/write operation. Default behavior in Phalcon is otherwise to connect when
    during adapter construction.

    The limit is minimum and maximum number of records in result set. Use 0 to disable
    the an limit (i.e. min = max = 0 => cache all result set).

    Supported backends are: xcache, apc, memcache and redis. If using multiple web servers
    in a distributed system setup, use memcache or redis:

                    ...
                        'cache'   => array(
                                    ...
                                'backend' => 'redis',
                                'options' => array(
                                        'host' => 'server.example.com',
                                        'port' => 6379,
                                        'auth' => 'supersecret',
                                        'persistent' => false
                                        'index' => 0,
                                )
                        )
                    ...

    The mediator setting defines how cache is handled. Which one to use depends on the 
    application. For example: If client side is maintaining state, then it's not critical if
    database and cache is in sync. Choose a cache method that gives most performance (which 
    is simple) in this particular scenario.

                    ...
                        'cache'   => array(
                                'mediator' => 'request',
                        )
                    ...

    The following mediator handlers can be used:

        o) complex:  
            Keeps per table indexes containing all cache keys related to queries on that 
            table. Upon modify in one table, all related cache keys are invalidated and
            the index is purged.

        o) direct:
            This is the same as disable cache. All queries are direct on database and no
            query results are cached.

        o) mutable:
            Same as request except that cached keys are cleaned up on update, insert or
            delete on a table.

        o) readonce:
            Cache entries are read once. The query result gets cached and is deleted
            upon being fetched next time.

        o) request:
            All queries are cached until the request finished. Each script keeps track of
            cache keys used and cleans them up on terminate. This is a safe bet, but not the
            most performant.

        o) simple:
            This is the handler that gives optimal performance. All queries are simply
            cached and left to the cache backend to cleanup when the TTL for each cache
            entry expires.

    The default mediator handler is mutable and gives a good mix between keeping cache
    in sync with database while giving sufficient performance for frequent access to the
    same query data. The complex handler has under some rare conditions left dangling cache 
    entries (that being said, it might have be solved during the mediator handlers rework).

    For the simple handler adjust the dbcache -> lifetime setting to set the wanted 
    time to live (TTL) for cache entries:

                    ...
        'dbcache'     => array(
                'lifetime' => 9200,
                    ...

    It's also possible to use the distributed/shared cache (configured by dbcache). Options 
    are set in config.def and uses the dbcache service:

        // 
        // Cache options:
        // 
        'dbread' => array(
                    ...
                'params' => array(
                    ...
                        'adapter' => array(
                                'cached'     => true,
                                'deferred'   => true                                
                        ),                        
                        'cache'   => array(
                                'exclude' => array('tables' => array('answers')),
                                'backend' => 'dbcache'  // Use the shared service
                        )
                )   
     )

    Defines both the upper and lower backend to get distributed cache consisting of a network 
    cache combined with a local cache. If either upper or lower backend is defined, then the 
    service creates a shared cache (system local or networked).

    Defining a distributed cache is probably most interesting if the cache needs to be split 
    among different physical locations. In a distributed system within a single organization, 
    its probably better to use redis or memcache.

    To replace exclude settings (in cache mediator) rather that merging with defaults, set
    merge == false:

        // 
        // Cache options:
        // 
        'dbread' => array(
                    ...
                'params' => array(
                    ...
                        'adapter' => array(
                                'cached'     => true,
                                'deferred'   => true                                
                        ),                        
                        'cache'   => array(
                                'exclude' => array(
                                    'tables' => array(),    // Cache all tables
                                    'result' => array('empty' => false),
                                    'merge'  => false       // Replace instead of merge!
                                ),
                                'backend' => 'dbcache'      // Use the shared service
                        )
                )   
     )

    Need a more complex caching strategy? Consider modify the config/system/services.php to 
    set your own cache object:

            $di->set('dbread', function() use ($config, $di) {
                    $backend = new MyComplexCache($config);
                    $factory = new \OpenExam\Library\Database\Adapter\Factory();
                    $factory->setCache(backend);
                        ...
                    return $factory->getAdapter();
            }, true);
            
    Your custom class (MyComplexCache) needs to implement the exists(), get(), save()
    and delete() methods from Phalcon\Cache\BackendInterface

    o) FILTERING:

    Per table result set cache filtering can be enabled using the "cache -> exclude -> filter"
    config setting. The setting value is either an callback function or an array keyed by the 
    table name with an array of result types to exclude:

        'cache'   => array(
                'exclude'   => array(
                        'filter' => array('locks' => array('empty'), 'users' => array('false'))
                ),
                'backend' => 'dbcache'  // Use the shared service                                
        )
        

    Exempel 1: 

        // 
        // Exclude caching of empty locks:
        // 
        'cache'   => array(
                'exclude'   => array(
                        'filter' => array('locks' => array('empty'))
                ),
                'backend' => 'dbcache'  // Use the shared service                                
        )

    Exempel 2: 

        // 
        // Same as example 1, but using a closure:
        // 
        'cache'   => array(
                'exclude'   => array(
                        'filter' => function($table, $data) { 
                            return $table == 'locks' && $data->numRows() == 0; 
                        }
                ),
                'backend' => 'dbcache'  // Use the shared service                                
        )

    Default behavior is to filter empty locks. Pass "cache -> exclude -> filter == null" to
    disable all per table filtering:

        'cache'   => array(
                'exclude'   => array(
                        'filter' => null
                ),
                'backend' => 'dbcache'  // Use the shared service                                
        )

    o) MAINTENANCE:

    The cache can be configured to check coherence and doing housekeeping (cleanup) by 
    defining coherence settings:

        // 
        // Cache options:
        // 
        'dbread' => array(
                    ...
                'params' => array(
                    ...
                        'adapter' => array(
                                    ...
                                'cached'     => true,   // Cached database adapter
                        ),                        
                        'cache'   => array(
                                'coherence' => array(
                                        'resolve'   => 'delete',    // Strategy
                                        'housekeep' => 450          // Interval
                                ),
                                'backend' => 'dbcache'  // Use the shared service                                
                        )
                )

    Possible values for strategy are 'ignore','readd','delete','clean' and 'purge'. See 
    class Coherence for details. The housekeep setting defines the interval at which the
    table index (array of result set) should be rebuilt and only affected that single 
    table.

    The coherence check comes at an expense. In general, the default settings should be
    fine and you don't need to configure coherence, leaving it disabled. Leaving coherence
    unconfigured both saves CPU, memory and cache space. 

    If you don't know whether you need it, then you don't!
    

    o) EXAMPLES:

    These examples should serve as a guideline when configure caching. You should run some
    test and measure real world performance.

        1. Single web server:

            'dbread'      => array(
                    'config' => array(
                        ...
                    ),
                    'params' => array(
                                ...
                            'adapter' => array(
                                    'cached'     => true,
                                    'deferred'   => true                                
                            ),                        
                            'cache'   => array(
                                    'exclude' => array('tables' => array('answers')),
                                    'backend' => 'xcache',
                                    'options' => array(
                                            'prefix' => 'adapter-cache'
                                    )
                           )
                    )
            ),

        2. Multiple web server in same physical location:

            'dbread'      => array(
                    'config' => array(
                        ...
                    ),
                    'params' => array(
                                ...
                            'adapter' => array(
                                    'cached'     => true,
                                    'deferred'   => true                                
                            ),                        
                            'cache'   => array(
                                    'lifetime' => 7200,
                                    'backend'  => 'redis',
                                    'options'  => array(
                                                 'host' => 'redis.example.com',
                                                 'port' => 6379,
                                                 'persistent' => false,
                                                 'index' => 0,                                        
                                                 'prefix' => 'adapter-cache'
                                    )
                            )
                    )
            ),

        3. Multiple web server in different physical locations:

            'dbread'      => array(
                    'config' => array(
                        ...
                    ),
                    'params' => array(
                                ...
                            'adapter' => array(
                                    'cached'     => true,
                                    'deferred'   => true                                
                            ),                        
                            'cache'   => array(
                                    'lifetime' => 7200,
                                    'backend'  => 'dbcache'
                            )
                    )
            ),
            'dbcache'     => array(
                    'lifetime' => 9200,
                    'upper' => array(
                            'backend' => 'redis',
                            'options' => array(
                                         'host' => 'redis.example.com',
                                         'port' => 6379,
                                         'persistent' => false,
                                         'index' => 0,                                        
                                         'prefix' => 'adapter-cache'
                            )                        
                    ),
                    'lower' => array(
                            'backend' => 'xcache',
                            'options' => array(
                                    'prefix' => 'adapter-cache'
                            )                        
                    )
            )

    Other options are of course to setup redis in some location aware setup and use a 
    special cache service, but its out of scope in this documentation.

** TROUBLESHOOT:

    o) GHOST DATA:

    If you experience problem related to "ghost data" make sure that the mysqlnd_qc 
    extension is not enabled. This typical manifest itself by sticky data being picked 
    up (even tough cache been cleaned and data removed from database) and result in error 
    messages about uniqueness violation.

    Test if you are affected by reading a session model, updating/saving it and then read 
    it back. If database log shows a single read or if session data is out of sync, then you 
    might suffer by external query cache. 

    Notice that this is out of control for the system. It's model and data cache can only
    invalidate data that are under its control.


// Anders Lövgren, 2014-08-25
